This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-23T15:34:49.253Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    index.css
  components/
    ui/
      accordion/
        Accordion.vue
        AccordionContent.vue
        AccordionItem.vue
        AccordionTrigger.vue
        index.ts
      alert/
        Alert.vue
        AlertDescription.vue
        AlertTitle.vue
        index.ts
      avatar/
        Avatar.vue
        AvatarFallback.vue
        AvatarImage.vue
        index.ts
      badge/
        Badge.vue
        index.ts
      button/
        Button.vue
        index.ts
      card/
        Card.vue
        CardContent.vue
        CardDescription.vue
        CardFooter.vue
        CardHeader.vue
        CardTitle.vue
        index.ts
      carousel/
        Carousel.vue
        CarouselContent.vue
        CarouselItem.vue
        CarouselNext.vue
        CarouselPrevious.vue
        index.ts
        interface.ts
        useCarousel.ts
      collapsible/
        Collapsible.vue
        CollapsibleContent.vue
        CollapsibleTrigger.vue
        index.ts
      input/
        index.ts
        Input.vue
      label/
        index.ts
        Label.vue
      navigation-menu/
        index.ts
        NavigationMenu.vue
        NavigationMenuContent.vue
        NavigationMenuIndicator.vue
        NavigationMenuItem.vue
        NavigationMenuLink.vue
        NavigationMenuList.vue
        NavigationMenuTrigger.vue
        NavigationMenuViewport.vue
      scroll-area/
        index.ts
        ScrollArea.vue
        ScrollBar.vue
      select/
        index.ts
        Select.vue
        SelectContent.vue
        SelectGroup.vue
        SelectItem.vue
        SelectItemText.vue
        SelectLabel.vue
        SelectScrollDownButton.vue
        SelectScrollUpButton.vue
        SelectSeparator.vue
        SelectTrigger.vue
        SelectValue.vue
      separator/
        index.ts
        Separator.vue
      sheet/
        index.ts
        Sheet.vue
        SheetClose.vue
        SheetContent.vue
        SheetDescription.vue
        SheetFooter.vue
        SheetHeader.vue
        SheetTitle.vue
        SheetTrigger.vue
      textarea/
        index.ts
        Textarea.vue
      toast/
        index.ts
        Toast.vue
        ToastAction.vue
        ToastClose.vue
        ToastDescription.vue
        Toaster.vue
        ToastProvider.vue
        ToastTitle.vue
        ToastViewport.vue
        use-toast.ts
    ArticleCta.vue
    ArticleResume.vue
    ArticleTitle.vue
    Benefits.vue
    Community.vue
    Contact.vue
    FAQ.vue
    Features.vue
    Footer.vue
    Hero.vue
    HowItWorks.vue
    Navbar.vue
    Pricing.vue
    Sponsors.vue
    Team.vue
    Testimonials.vue
    ToggleTheme.vue
  composables/
    useBlogPosts.ts
  content/
    blog/
      abonnements-pour-les-boulangeries.md
  icons/
    DiscordIcon.vue
    GithubIcon.vue
    LinkedInIcon.vue
    XIcon.vue
  lib/
    utils.ts
  pages/
    BlogPage.vue
    BlogPost.vue
    BlogPostPage.vue
    Home.vue
  router/
    index.ts
  App.vue
  main.ts
  vite-env.d.ts
.gitignore
components.json
index.html
LICENSE
package.json
README.md
tailwind.config.js
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/index.css
================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;


html {
  scroll-behavior: smooth;
  font-size: 16px;
  line-height: 1.5;
  font-family: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
    'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
}

/* *=========== Default theme =========== */
/* @layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --ring: 240 4.9% 83.9%;
  }
} */

/* *=========== Theme =========== */
@layer base {
 :root {
   --background: 0 0% 100%;
   --foreground: 222 84% 4.9%;
   --card: 0 0% 100%;
   --card-foreground: 222 84% 4.9%;
   --popover: 0 0% 100%;
   --popover-foreground: 222 84% 4.9%;
   --primary: 221.2 83.2% 53.3%;
   --primary-foreground: 210 40% 98%;
   --secondary: 222 40% 96.1%;
   --secondary-foreground: 222 47.4% 11.2%;
   --muted: 222 40% 96.1%;
   --muted-foreground: 215.4 16.3% 46.9%;
   --accent: 222 40% 96.1%;
   --accent-foreground: 222 47.4% 11.2%;
   --destructive: 0 84.2% 60.2%;
   --destructive-foreground: 222 40% 98%;
   --border: 214.3 31.8% 91.4%;
   --input: 214.3 31.8% 91.4%;
   --ring: 221.2 83.2% 53.3%;
   --radius: 0.3rem;
   --chart-1: 221 76% 53%;
   --chart-2: 173 58% 39%;
   --chart-3: 197 37% 24%;
   --chart-4: 43 74% 66%;
   --chart-5: 27 87% 67%;
 }
 .dark {
   --background: 222 84% 4.9%;
   --foreground: 222 40% 98%;
   --card: 222 84% 4.9%;
   --card-foreground: 222 40% 98%;
   --popover: 222 84% 4.9%;
   --popover-foreground: 222 40% 98%;
   --primary: 217.2 91.2% 59.8%;
   --primary-foreground: 222 47.4% 11.2%;
   --secondary: 217.2 32.6% 17.5%;
   --secondary-foreground: 222 40% 98%;
   --muted: 217.2 32.6% 17.5%;
   --muted-foreground: 215 20.2% 65.1%;
   --accent: 217.2 32.6% 17.5%;
   --accent-foreground: 222 40% 98%;
   --destructive: 0 62.8% 30.6%;
   --destructive-foreground: 222 40% 98%;
   --border: 217.2 32.6% 17.5%;
   --input: 217.2 32.6% 17.5%;
   --ring: 224.3 76.3% 48%;
   --chart-1: 220 70% 50%;
   --chart-2: 160 60% 45%;
   --chart-3: 30 80% 55%;
   --chart-4: 280 65% 60%;
   --chart-5: 340 75% 55%;
 }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/components/ui/accordion/Accordion.vue
================
<script setup lang="ts">
import {
  AccordionRoot,
  type AccordionRootEmits,
  type AccordionRootProps,
  useForwardPropsEmits,
} from 'radix-vue'

const props = defineProps<AccordionRootProps>()
const emits = defineEmits<AccordionRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <AccordionRoot v-bind="forwarded">
    <slot />
  </AccordionRoot>
</template>

================
File: src/components/ui/accordion/AccordionContent.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from "vue";
import { AccordionContent, type AccordionContentProps } from "radix-vue";
import { cn } from "@/lib/utils";

const props = defineProps<
  AccordionContentProps & { class?: HTMLAttributes["class"] }
>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});
</script>

<template>
  <AccordionContent
    v-bind="delegatedProps"
    class="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
  >
    <div
      :class="cn('pb-4 pt-0 text-muted-foreground text-[16px]', props.class)"
    >
      <slot />
    </div>
  </AccordionContent>
</template>

================
File: src/components/ui/accordion/AccordionItem.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from "vue";
import {
  AccordionItem,
  type AccordionItemProps,
  useForwardProps,
} from "radix-vue";
import { cn } from "@/lib/utils";

const props = defineProps<
  AccordionItemProps & { class?: HTMLAttributes["class"] }
>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <AccordionItem
    v-bind="forwardedProps"
    :class="
      cn(
        'border-b bg-muted/50 dark:bg-card px-4 my-4 border rounded-lg',
        props.class
      )
    "
  >
    <slot />
  </AccordionItem>
</template>

================
File: src/components/ui/accordion/AccordionTrigger.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from "vue";
import {
  AccordionHeader,
  AccordionTrigger,
  type AccordionTriggerProps,
} from "radix-vue";
import { Plus } from "lucide-vue-next";
import { cn } from "@/lib/utils";

const props = defineProps<
  AccordionTriggerProps & { class?: HTMLAttributes["class"] }
>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});
</script>

<template>
  <AccordionHeader class="flex">
    <AccordionTrigger
      v-bind="delegatedProps"
      :class="
        cn(
          'flex flex-1 gap-4 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-[135deg]',
          props.class
        )
      "
    >
      <slot />
      <slot name="icon">
        <Plus class="h-4 w-4 shrink-0 transition-transform duration-200" />
      </slot>
    </AccordionTrigger>
  </AccordionHeader>
</template>

================
File: src/components/ui/accordion/index.ts
================
export { default as Accordion } from './Accordion.vue'
export { default as AccordionContent } from './AccordionContent.vue'
export { default as AccordionItem } from './AccordionItem.vue'
export { default as AccordionTrigger } from './AccordionTrigger.vue'

================
File: src/components/ui/alert/Alert.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { type AlertVariants, alertVariants } from '.'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
  variant?: AlertVariants['variant']
}>()
</script>

<template>
  <div :class="cn(alertVariants({ variant }), props.class)" role="alert">
    <slot />
  </div>
</template>

================
File: src/components/ui/alert/AlertDescription.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('text-sm [&_p]:leading-relaxed', props.class)">
    <slot />
  </div>
</template>

================
File: src/components/ui/alert/AlertTitle.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <h5 :class="cn('mb-1 font-medium leading-none tracking-tight', props.class)">
    <slot />
  </h5>
</template>

================
File: src/components/ui/alert/index.ts
================
import { type VariantProps, cva } from 'class-variance-authority'

export { default as Alert } from './Alert.vue'
export { default as AlertTitle } from './AlertTitle.vue'
export { default as AlertDescription } from './AlertDescription.vue'

export const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

export type AlertVariants = VariantProps<typeof alertVariants>

================
File: src/components/ui/avatar/Avatar.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { AvatarRoot } from 'radix-vue'
import { type AvatarVariants, avatarVariant } from '.'
import { cn } from '@/lib/utils'

const props = withDefaults(defineProps<{
  class?: HTMLAttributes['class']
  size?: AvatarVariants['size']
  shape?: AvatarVariants['shape']
}>(), {
  size: 'sm',
  shape: 'circle',
})
</script>

<template>
  <AvatarRoot :class="cn(avatarVariant({ size, shape }), props.class)">
    <slot />
  </AvatarRoot>
</template>

================
File: src/components/ui/avatar/AvatarFallback.vue
================
<script setup lang="ts">
import { AvatarFallback, type AvatarFallbackProps } from 'radix-vue'

const props = defineProps<AvatarFallbackProps>()
</script>

<template>
  <AvatarFallback v-bind="props">
    <slot />
  </AvatarFallback>
</template>

================
File: src/components/ui/avatar/AvatarImage.vue
================
<script setup lang="ts">
import { AvatarImage, type AvatarImageProps } from 'radix-vue'

const props = defineProps<AvatarImageProps>()
</script>

<template>
  <AvatarImage v-bind="props" class="h-full w-full object-cover" />
</template>

================
File: src/components/ui/avatar/index.ts
================
import { type VariantProps, cva } from 'class-variance-authority'

export { default as Avatar } from './Avatar.vue'
export { default as AvatarImage } from './AvatarImage.vue'
export { default as AvatarFallback } from './AvatarFallback.vue'

export const avatarVariant = cva(
  'inline-flex items-center justify-center font-normal text-foreground select-none shrink-0 bg-secondary overflow-hidden',
  {
    variants: {
      size: {
        sm: 'h-10 w-10 text-xs',
        base: 'h-16 w-16 text-2xl',
        lg: 'h-32 w-32 text-5xl',
      },
      shape: {
        circle: 'rounded-full',
        square: 'rounded-md',
      },
    },
  },
)

export type AvatarVariants = VariantProps<typeof avatarVariant>

================
File: src/components/ui/badge/Badge.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { type BadgeVariants, badgeVariants } from '.'
import { cn } from '@/lib/utils'

const props = defineProps<{
  variant?: BadgeVariants['variant']
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn(badgeVariants({ variant }), props.class)">
    <slot />
  </div>
</template>

================
File: src/components/ui/badge/index.ts
================
import { type VariantProps, cva } from "class-variance-authority";

export { default as Badge } from "./Badge.vue";

export const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export type BadgeVariants = VariantProps<typeof badgeVariants>;

================
File: src/components/ui/button/Button.vue
================
<script setup lang="ts">
import { computed, type HTMLAttributes } from "vue";
import { Primitive, type PrimitiveProps } from "radix-vue";
import { type ButtonVariants, buttonVariants } from ".";
import { cn } from "@/lib/utils";

interface Props extends PrimitiveProps {
  variant?: ButtonVariants["variant"];
  size?: ButtonVariants["size"];
  class?: HTMLAttributes["class"];
  href?: string;
}

const props = withDefaults(defineProps<Props>(), {
  as: "button",
});

const element = computed(() => props.href ? 'a' : props.as);
</script>

<template>
  <Primitive :as="element" :as-child="asChild" :href="href" :class="cn(buttonVariants({ variant, size }), props.class)">
    <slot />
  </Primitive>
</template>

================
File: src/components/ui/button/index.ts
================
import { type VariantProps, cva } from "class-variance-authority";

export { default as Button } from "./Button.vue";

export const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export type ButtonVariants = VariantProps<typeof buttonVariants>;

================
File: src/components/ui/card/Card.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from "vue";
import { cn } from "@/lib/utils";

const props = defineProps<{
  class?: HTMLAttributes["class"];
}>();
</script>

<template>
  <div
    :class="
      cn(
        'rounded-lg border bg-card text-card-foreground shadow-sm',
        props.class
      )
    "
  >
    <slot />
  </div>
</template>

================
File: src/components/ui/card/CardContent.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('p-6 pt-0', props.class)">
    <slot />
  </div>
</template>

================
File: src/components/ui/card/CardDescription.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <p :class="cn('text-sm text-muted-foreground', props.class)">
    <slot />
  </p>
</template>

================
File: src/components/ui/card/CardFooter.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex items-center p-6 pt-0', props.class)">
    <slot />
  </div>
</template>

================
File: src/components/ui/card/CardHeader.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex flex-col gap-y-1.5 p-6', props.class)">
    <slot />
  </div>
</template>

================
File: src/components/ui/card/CardTitle.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <h3
    :class="
      cn('text-2xl font-semibold leading-none tracking-tight', props.class)
    "
  >
    <slot />
  </h3>
</template>

================
File: src/components/ui/card/index.ts
================
export { default as Card } from './Card.vue'
export { default as CardHeader } from './CardHeader.vue'
export { default as CardTitle } from './CardTitle.vue'
export { default as CardDescription } from './CardDescription.vue'
export { default as CardContent } from './CardContent.vue'
export { default as CardFooter } from './CardFooter.vue'

================
File: src/components/ui/carousel/Carousel.vue
================
<script setup lang="ts">
import { useProvideCarousel } from './useCarousel'
import type { CarouselEmits, CarouselProps, WithClassAsProps } from './interface'
import { cn } from '@/lib/utils'

const props = withDefaults(defineProps<CarouselProps & WithClassAsProps>(), {
  orientation: 'horizontal',
})

const emits = defineEmits<CarouselEmits>()

const carouselArgs = useProvideCarousel(props, emits)

defineExpose(carouselArgs)

function onKeyDown(event: KeyboardEvent) {
  const prevKey = props.orientation === 'vertical' ? 'ArrowUp' : 'ArrowLeft'
  const nextKey = props.orientation === 'vertical' ? 'ArrowDown' : 'ArrowRight'

  if (event.key === prevKey) {
    event.preventDefault()
    carouselArgs.scrollPrev()

    return
  }

  if (event.key === nextKey) {
    event.preventDefault()
    carouselArgs.scrollNext()
  }
}
</script>

<template>
  <div
    :class="cn('relative', props.class)"
    role="region"
    aria-roledescription="carousel"
    tabindex="0"
    @keydown="onKeyDown"
  >
    <slot v-bind="carouselArgs" />
  </div>
</template>

================
File: src/components/ui/carousel/CarouselContent.vue
================
<script setup lang="ts">
import { useCarousel } from './useCarousel'
import type { WithClassAsProps } from './interface'
import { cn } from '@/lib/utils'

defineOptions({
  inheritAttrs: false,
})

const props = defineProps<WithClassAsProps>()

const { carouselRef, orientation } = useCarousel()
</script>

<template>
  <div ref="carouselRef" class="overflow-hidden">
    <div
      :class="
        cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          props.class,
        )"
      v-bind="$attrs"
    >
      <slot />
    </div>
  </div>
</template>

================
File: src/components/ui/carousel/CarouselItem.vue
================
<script setup lang="ts">
import { useCarousel } from './useCarousel'
import type { WithClassAsProps } from './interface'
import { cn } from '@/lib/utils'

const props = defineProps<WithClassAsProps>()

const { orientation } = useCarousel()
</script>

<template>
  <div
    role="group"
    aria-roledescription="slide"
    :class="cn(
      'min-w-0 shrink-0 grow-0 basis-full',
      orientation === 'horizontal' ? 'pl-4' : 'pt-4',
      props.class,
    )"
  >
    <slot />
  </div>
</template>

================
File: src/components/ui/carousel/CarouselNext.vue
================
<script setup lang="ts">
import { ArrowRight } from 'lucide-vue-next'
import { useCarousel } from './useCarousel'
import type { WithClassAsProps } from './interface'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

const props = defineProps<WithClassAsProps>()

const { orientation, canScrollNext, scrollNext } = useCarousel()
</script>

<template>
  <Button
    :disabled="!canScrollNext"
    :class="cn(
      'touch-manipulation absolute h-8 w-8 rounded-full p-0',
      orientation === 'horizontal'
        ? '-right-12 top-1/2 -translate-y-1/2'
        : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
      props.class,
    )"
    variant="outline"
    @click="scrollNext"
  >
    <slot>
      <ArrowRight class="h-4 w-4 text-current" />
    </slot>
  </Button>
</template>

================
File: src/components/ui/carousel/CarouselPrevious.vue
================
<script setup lang="ts">
import { ArrowLeft } from 'lucide-vue-next'
import { useCarousel } from './useCarousel'
import type { WithClassAsProps } from './interface'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

const props = defineProps<WithClassAsProps>()

const { orientation, canScrollPrev, scrollPrev } = useCarousel()
</script>

<template>
  <Button
    :disabled="!canScrollPrev"
    :class="cn(
      'touch-manipulation absolute h-8 w-8 rounded-full p-0',
      orientation === 'horizontal'
        ? '-left-12 top-1/2 -translate-y-1/2'
        : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
      props.class,
    )"
    variant="outline"
    @click="scrollPrev"
  >
    <slot>
      <ArrowLeft class="h-4 w-4 text-current" />
    </slot>
  </Button>
</template>

================
File: src/components/ui/carousel/index.ts
================
export { default as Carousel } from './Carousel.vue'
export { default as CarouselContent } from './CarouselContent.vue'
export { default as CarouselItem } from './CarouselItem.vue'
export { default as CarouselPrevious } from './CarouselPrevious.vue'
export { default as CarouselNext } from './CarouselNext.vue'
export { useCarousel } from './useCarousel'

export type {
  EmblaCarouselType as CarouselApi,
} from 'embla-carousel'

================
File: src/components/ui/carousel/interface.ts
================
import type {
  EmblaCarouselType as CarouselApi,
  EmblaOptionsType as CarouselOptions,
  EmblaPluginType as CarouselPlugin,
} from 'embla-carousel'
import type { HTMLAttributes, Ref } from 'vue'

export interface CarouselProps {
  opts?: CarouselOptions | Ref<CarouselOptions>
  plugins?: CarouselPlugin[] | Ref<CarouselPlugin[]>
  orientation?: 'horizontal' | 'vertical'
}

export interface CarouselEmits {
  (e: 'init-api', payload: CarouselApi): void
}

export interface WithClassAsProps {
  class?: HTMLAttributes['class']
}

================
File: src/components/ui/carousel/useCarousel.ts
================
import { createInjectionState } from '@vueuse/core'
import emblaCarouselVue from 'embla-carousel-vue'
import { onMounted, ref } from 'vue'
import type {
  EmblaCarouselType as CarouselApi,
} from 'embla-carousel'
import type { CarouselEmits, CarouselProps } from './interface'

const [useProvideCarousel, useInjectCarousel] = createInjectionState(
  ({
    opts,
    orientation,
    plugins,
  }: CarouselProps, emits: CarouselEmits) => {
    const [emblaNode, emblaApi] = emblaCarouselVue({
      ...opts,
      axis: orientation === 'horizontal' ? 'x' : 'y',
    }, plugins)

    function scrollPrev() {
      emblaApi.value?.scrollPrev()
    }
    function scrollNext() {
      emblaApi.value?.scrollNext()
    }

    const canScrollNext = ref(true)
    const canScrollPrev = ref(true)

    function onSelect(api: CarouselApi) {
      canScrollNext.value = api.canScrollNext()
      canScrollPrev.value = api.canScrollPrev()
    }

    onMounted(() => {
      if (!emblaApi.value)
        return

      emblaApi.value?.on('init', onSelect)
      emblaApi.value?.on('reInit', onSelect)
      emblaApi.value?.on('select', onSelect)

      emits('init-api', emblaApi.value)
    })

    return { carouselRef: emblaNode, carouselApi: emblaApi, canScrollPrev, canScrollNext, scrollPrev, scrollNext, orientation }
  },
)

function useCarousel() {
  const carouselState = useInjectCarousel()

  if (!carouselState)
    throw new Error('useCarousel must be used within a <Carousel />')

  return carouselState
}

export { useCarousel, useProvideCarousel }

================
File: src/components/ui/collapsible/Collapsible.vue
================
<script setup lang="ts">
import { CollapsibleRoot, useForwardPropsEmits } from 'radix-vue'
import type { CollapsibleRootEmits, CollapsibleRootProps } from 'radix-vue'

const props = defineProps<CollapsibleRootProps>()
const emits = defineEmits<CollapsibleRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <CollapsibleRoot v-slot="{ open }" v-bind="forwarded">
    <slot :open="open" />
  </CollapsibleRoot>
</template>

================
File: src/components/ui/collapsible/CollapsibleContent.vue
================
<script setup lang="ts">
import { CollapsibleContent, type CollapsibleContentProps } from 'radix-vue'

const props = defineProps<CollapsibleContentProps>()
</script>

<template>
  <CollapsibleContent v-bind="props" class="overflow-hidden transition-all data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down">
    <slot />
  </CollapsibleContent>
</template>

================
File: src/components/ui/collapsible/CollapsibleTrigger.vue
================
<script setup lang="ts">
import { CollapsibleTrigger, type CollapsibleTriggerProps } from 'radix-vue'

const props = defineProps<CollapsibleTriggerProps>()
</script>

<template>
  <CollapsibleTrigger v-bind="props">
    <slot />
  </CollapsibleTrigger>
</template>

================
File: src/components/ui/collapsible/index.ts
================
export { default as Collapsible } from './Collapsible.vue'
export { default as CollapsibleTrigger } from './CollapsibleTrigger.vue'
export { default as CollapsibleContent } from './CollapsibleContent.vue'

================
File: src/components/ui/input/index.ts
================
export { default as Input } from './Input.vue'

================
File: src/components/ui/input/Input.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { useVModel } from '@vueuse/core'
import { cn } from '@/lib/utils'

const props = defineProps<{
  defaultValue?: string | number
  modelValue?: string | number
  class?: HTMLAttributes['class']
}>()

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void
}>()

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
})
</script>

<template>
  <input v-model="modelValue" :class="cn('flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', props.class)">
</template>

================
File: src/components/ui/label/index.ts
================
export { default as Label } from './Label.vue'

================
File: src/components/ui/label/Label.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { Label, type LabelProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<LabelProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <Label
    v-bind="delegatedProps"
    :class="
      cn(
        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
        props.class,
      )
    "
  >
    <slot />
  </Label>
</template>

================
File: src/components/ui/navigation-menu/index.ts
================
import { cva } from 'class-variance-authority'

export { default as NavigationMenu } from './NavigationMenu.vue'
export { default as NavigationMenuList } from './NavigationMenuList.vue'
export { default as NavigationMenuItem } from './NavigationMenuItem.vue'
export { default as NavigationMenuTrigger } from './NavigationMenuTrigger.vue'
export { default as NavigationMenuContent } from './NavigationMenuContent.vue'
export { default as NavigationMenuLink } from './NavigationMenuLink.vue'

export const navigationMenuTriggerStyle = cva(
  'group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50',
)

================
File: src/components/ui/navigation-menu/NavigationMenu.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  NavigationMenuRoot,
  type NavigationMenuRootEmits,
  type NavigationMenuRootProps,
  useForwardPropsEmits,
} from 'radix-vue'
import NavigationMenuViewport from './NavigationMenuViewport.vue'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuRootProps & { class?: HTMLAttributes['class'] }>()

const emits = defineEmits<NavigationMenuRootEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <NavigationMenuRoot
    v-bind="forwarded"
    :class="cn('relative z-10 flex max-w-max flex-1 items-center justify-center', props.class)"
  >
    <slot />
    <NavigationMenuViewport />
  </NavigationMenuRoot>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuContent.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  NavigationMenuContent,
  type NavigationMenuContentEmits,
  type NavigationMenuContentProps,
  useForwardPropsEmits,
} from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuContentProps & { class?: HTMLAttributes['class'] }>()

const emits = defineEmits<NavigationMenuContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <NavigationMenuContent
    v-bind="forwarded"
    :class="cn(
      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto',
      props.class,
    )"
  >
    <slot />
  </NavigationMenuContent>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuIndicator.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { NavigationMenuIndicator, type NavigationMenuIndicatorProps, useForwardProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuIndicatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <NavigationMenuIndicator
    v-bind="forwardedProps"
    :class="cn('top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in', props.class)"
  >
    <div class="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuIndicator>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuItem.vue
================
<script setup lang="ts">
import { NavigationMenuItem, type NavigationMenuItemProps } from 'radix-vue'

const props = defineProps<NavigationMenuItemProps>()
</script>

<template>
  <NavigationMenuItem v-bind="props">
    <slot />
  </NavigationMenuItem>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuLink.vue
================
<script setup lang="ts">
import {
  NavigationMenuLink,
  type NavigationMenuLinkEmits,
  type NavigationMenuLinkProps,
  useForwardPropsEmits,
} from 'radix-vue'

const props = defineProps<NavigationMenuLinkProps>()
const emits = defineEmits<NavigationMenuLinkEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <NavigationMenuLink v-bind="forwarded">
    <slot />
  </NavigationMenuLink>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuList.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { NavigationMenuList, type NavigationMenuListProps, useForwardProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuListProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <NavigationMenuList
    v-bind="forwardedProps"
    :class="
      cn(
        'group flex flex-1 list-none items-center justify-center gap-x-1',
        props.class,
      )
    "
  >
    <slot />
  </NavigationMenuList>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuTrigger.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  NavigationMenuTrigger,
  type NavigationMenuTriggerProps,
  useForwardProps,
} from 'radix-vue'
import { ChevronDown } from 'lucide-vue-next'
import { navigationMenuTriggerStyle } from '.'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <NavigationMenuTrigger
    v-bind="forwardedProps"
    :class="cn(navigationMenuTriggerStyle(), 'group', props.class)"
  >
    <slot />
    <ChevronDown
      class="relative top-px ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuTrigger>
</template>

================
File: src/components/ui/navigation-menu/NavigationMenuViewport.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  NavigationMenuViewport,
  type NavigationMenuViewportProps,
  useForwardProps,
} from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<NavigationMenuViewportProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <div class="absolute left-0 top-full flex justify-center">
    <NavigationMenuViewport
      v-bind="forwardedProps"
      :class="
        cn(
          'origin-top-center relative mt-1.5 h-[--radix-navigation-menu-viewport-height] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[--radix-navigation-menu-viewport-width]',
          props.class,
        )
      "
    />
  </div>
</template>

================
File: src/components/ui/scroll-area/index.ts
================
export { default as ScrollArea } from './ScrollArea.vue'
export { default as ScrollBar } from './ScrollBar.vue'

================
File: src/components/ui/scroll-area/ScrollArea.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  ScrollAreaCorner,
  ScrollAreaRoot,
  type ScrollAreaRootProps,
  ScrollAreaViewport,
} from 'radix-vue'
import ScrollBar from './ScrollBar.vue'
import { cn } from '@/lib/utils'

const props = defineProps<ScrollAreaRootProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ScrollAreaRoot v-bind="delegatedProps" :class="cn('relative overflow-hidden', props.class)">
    <ScrollAreaViewport class="h-full w-full rounded-[inherit]">
      <slot />
    </ScrollAreaViewport>
    <ScrollBar />
    <ScrollAreaCorner />
  </ScrollAreaRoot>
</template>

================
File: src/components/ui/scroll-area/ScrollBar.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { ScrollAreaScrollbar, type ScrollAreaScrollbarProps, ScrollAreaThumb } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = withDefaults(defineProps<ScrollAreaScrollbarProps & { class?: HTMLAttributes['class'] }>(), {
  orientation: 'vertical',
})

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ScrollAreaScrollbar
    v-bind="delegatedProps"
    :class="
      cn('flex touch-none select-none transition-colors',
         orientation === 'vertical'
           && 'h-full w-2.5 border-l border-l-transparent p-px',
         orientation === 'horizontal'
           && 'h-2.5 flex-col border-t border-t-transparent p-px',
         props.class)"
  >
    <ScrollAreaThumb class="relative flex-1 rounded-full bg-border" />
  </ScrollAreaScrollbar>
</template>

================
File: src/components/ui/select/index.ts
================
export { default as Select } from './Select.vue'
export { default as SelectValue } from './SelectValue.vue'
export { default as SelectTrigger } from './SelectTrigger.vue'
export { default as SelectContent } from './SelectContent.vue'
export { default as SelectGroup } from './SelectGroup.vue'
export { default as SelectItem } from './SelectItem.vue'
export { default as SelectItemText } from './SelectItemText.vue'
export { default as SelectLabel } from './SelectLabel.vue'
export { default as SelectSeparator } from './SelectSeparator.vue'
export { default as SelectScrollUpButton } from './SelectScrollUpButton.vue'
export { default as SelectScrollDownButton } from './SelectScrollDownButton.vue'

================
File: src/components/ui/select/Select.vue
================
<script setup lang="ts">
import type { SelectRootEmits, SelectRootProps } from 'radix-vue'
import { SelectRoot, useForwardPropsEmits } from 'radix-vue'

const props = defineProps<SelectRootProps>()
const emits = defineEmits<SelectRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <SelectRoot v-bind="forwarded">
    <slot />
  </SelectRoot>
</template>

================
File: src/components/ui/select/SelectContent.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  SelectContent,
  type SelectContentEmits,
  type SelectContentProps,
  SelectPortal,
  SelectViewport,
  useForwardPropsEmits,
} from 'radix-vue'
import { SelectScrollDownButton, SelectScrollUpButton } from '.'
import { cn } from '@/lib/utils'

defineOptions({
  inheritAttrs: false,
})

const props = withDefaults(
  defineProps<SelectContentProps & { class?: HTMLAttributes['class'] }>(),
  {
    position: 'popper',
  },
)
const emits = defineEmits<SelectContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <SelectPortal>
    <SelectContent
      v-bind="{ ...forwarded, ...$attrs }" :class="cn(
        'relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper'
          && 'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        props.class,
      )
      "
    >
      <SelectScrollUpButton />
      <SelectViewport :class="cn('p-1', position === 'popper' && 'h-[--radix-select-trigger-height] w-full min-w-[--radix-select-trigger-width]')">
        <slot />
      </SelectViewport>
      <SelectScrollDownButton />
    </SelectContent>
  </SelectPortal>
</template>

================
File: src/components/ui/select/SelectGroup.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { SelectGroup, type SelectGroupProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<SelectGroupProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <SelectGroup :class="cn('p-1 w-full', props.class)" v-bind="delegatedProps">
    <slot />
  </SelectGroup>
</template>

================
File: src/components/ui/select/SelectItem.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import {
  SelectItem,
  SelectItemIndicator,
  type SelectItemProps,
  SelectItemText,
  useForwardProps,
} from 'radix-vue'
import { Check } from 'lucide-vue-next'
import { cn } from '@/lib/utils'

const props = defineProps<SelectItemProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectItem
    v-bind="forwardedProps"
    :class="
      cn(
        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        props.class,
      )
    "
  >
    <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectItemIndicator>
        <Check class="h-4 w-4" />
      </SelectItemIndicator>
    </span>

    <SelectItemText>
      <slot />
    </SelectItemText>
  </SelectItem>
</template>

================
File: src/components/ui/select/SelectItemText.vue
================
<script setup lang="ts">
import { SelectItemText, type SelectItemTextProps } from 'radix-vue'

const props = defineProps<SelectItemTextProps>()
</script>

<template>
  <SelectItemText v-bind="props">
    <slot />
  </SelectItemText>
</template>

================
File: src/components/ui/select/SelectLabel.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { SelectLabel, type SelectLabelProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<SelectLabelProps & { class?: HTMLAttributes['class'] }>()
</script>

<template>
  <SelectLabel :class="cn('py-1.5 pl-8 pr-2 text-sm font-semibold', props.class)">
    <slot />
  </SelectLabel>
</template>

================
File: src/components/ui/select/SelectScrollDownButton.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { SelectScrollDownButton, type SelectScrollDownButtonProps, useForwardProps } from 'radix-vue'
import { ChevronDown } from 'lucide-vue-next'
import { cn } from '@/lib/utils'

const props = defineProps<SelectScrollDownButtonProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectScrollDownButton v-bind="forwardedProps" :class="cn('flex cursor-default items-center justify-center py-1', props.class)">
    <slot>
      <ChevronDown class="h-4 w-4" />
    </slot>
  </SelectScrollDownButton>
</template>

================
File: src/components/ui/select/SelectScrollUpButton.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { SelectScrollUpButton, type SelectScrollUpButtonProps, useForwardProps } from 'radix-vue'
import { ChevronUp } from 'lucide-vue-next'
import { cn } from '@/lib/utils'

const props = defineProps<SelectScrollUpButtonProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectScrollUpButton v-bind="forwardedProps" :class="cn('flex cursor-default items-center justify-center py-1', props.class)">
    <slot>
      <ChevronUp class="h-4 w-4" />
    </slot>
  </SelectScrollUpButton>
</template>

================
File: src/components/ui/select/SelectSeparator.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { SelectSeparator, type SelectSeparatorProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<SelectSeparatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <SelectSeparator v-bind="delegatedProps" :class="cn('-mx-1 my-1 h-px bg-muted', props.class)" />
</template>

================
File: src/components/ui/select/SelectTrigger.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { SelectIcon, SelectTrigger, type SelectTriggerProps, useForwardProps } from 'radix-vue'
import { ChevronDown } from 'lucide-vue-next'
import { cn } from '@/lib/utils'

const props = defineProps<SelectTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectTrigger
    v-bind="forwardedProps"
    :class="cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      props.class,
    )"
  >
    <slot />
    <SelectIcon as-child>
      <ChevronDown class="w-4 h-4 opacity-50" />
    </SelectIcon>
  </SelectTrigger>
</template>

================
File: src/components/ui/select/SelectValue.vue
================
<script setup lang="ts">
import { SelectValue, type SelectValueProps } from 'radix-vue'

const props = defineProps<SelectValueProps>()
</script>

<template>
  <SelectValue v-bind="props">
    <slot />
  </SelectValue>
</template>

================
File: src/components/ui/separator/index.ts
================
export { default as Separator } from './Separator.vue'

================
File: src/components/ui/separator/Separator.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { Separator, type SeparatorProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<SeparatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <Separator
    v-bind="delegatedProps"
    :class="cn('shrink-0 bg-border', props.orientation === 'vertical' ? 'w-px h-full' : 'h-px w-full', props.class)"
  />
</template>

================
File: src/components/ui/sheet/index.ts
================
import { type VariantProps, cva } from 'class-variance-authority'

export { default as Sheet } from './Sheet.vue'
export { default as SheetTrigger } from './SheetTrigger.vue'
export { default as SheetClose } from './SheetClose.vue'
export { default as SheetContent } from './SheetContent.vue'
export { default as SheetHeader } from './SheetHeader.vue'
export { default as SheetTitle } from './SheetTitle.vue'
export { default as SheetDescription } from './SheetDescription.vue'
export { default as SheetFooter } from './SheetFooter.vue'

export const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
            'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
            'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  },
)

export type SheetVariants = VariantProps<typeof sheetVariants>

================
File: src/components/ui/sheet/Sheet.vue
================
<script setup lang="ts">
import {
  DialogRoot,
  type DialogRootEmits,
  type DialogRootProps,
  useForwardPropsEmits,
} from "radix-vue";

const props = defineProps<DialogRootProps>();
const emits = defineEmits<DialogRootEmits>();

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DialogRoot v-bind="forwarded">
    <slot />
  </DialogRoot>
</template>

================
File: src/components/ui/sheet/SheetClose.vue
================
<script setup lang="ts">
import { DialogClose, type DialogCloseProps } from 'radix-vue'

const props = defineProps<DialogCloseProps>()
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>

================
File: src/components/ui/sheet/SheetContent.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from "vue";
import {
  DialogClose,
  DialogContent,
  type DialogContentEmits,
  type DialogContentProps,
  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "radix-vue";
import { X } from "lucide-vue-next";
import { type SheetVariants, sheetVariants } from ".";
import { cn } from "@/lib/utils";

interface SheetContentProps extends DialogContentProps {
  class?: HTMLAttributes["class"];
  side?: SheetVariants["side"];
}

defineOptions({
  inheritAttrs: false,
});

const props = defineProps<SheetContentProps>();

const emits = defineEmits<DialogContentEmits>();

const delegatedProps = computed(() => {
  const { class: _, side, ...delegated } = props;

  return delegated;
});

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    />
    <DialogContent
      :class="cn(sheetVariants({ side }), props.class)"
      v-bind="{ ...forwarded, ...$attrs }"
    >
      <slot />

      <DialogClose
        class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"
      >
        <X class="w-4 h-4 text-muted-foreground" />
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>

================
File: src/components/ui/sheet/SheetDescription.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { DialogDescription, type DialogDescriptionProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<DialogDescriptionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <DialogDescription
    :class="cn('text-sm text-muted-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogDescription>
</template>

================
File: src/components/ui/sheet/SheetFooter.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from "vue";
import { cn } from "@/lib/utils";

const props = defineProps<{ class?: HTMLAttributes["class"] }>();
</script>

<template>
  <div
    :class="
      cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-x-2',
        props.class
      )
    "
  >
    <slot />
  </div>
</template>

================
File: src/components/ui/sheet/SheetHeader.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{ class?: HTMLAttributes['class'] }>()
</script>

<template>
  <div
    :class="
      cn('flex flex-col gap-y-2 text-center sm:text-left', props.class)
    "
  >
    <slot />
  </div>
</template>

================
File: src/components/ui/sheet/SheetTitle.vue
================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { DialogTitle, type DialogTitleProps } from 'radix-vue'
import { cn } from '@/lib/utils'

const props = defineProps<DialogTitleProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <DialogTitle
    :class="cn('text-lg font-semibold text-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogTitle>
</template>

================
File: src/components/ui/sheet/SheetTrigger.vue
================
<script setup lang="ts">
import { DialogTrigger, type DialogTriggerProps } from "radix-vue";

const props = defineProps<DialogTriggerProps>();
</script>

<template>
  <DialogTrigger v-bind="props">
    <slot />
  </DialogTrigger>
</template>

================
File: src/components/ui/textarea/index.ts
================
export { default as Textarea } from './Textarea.vue'

================
File: src/components/ui/textarea/Textarea.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { useVModel } from '@vueuse/core'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
  defaultValue?: string | number
  modelValue?: string | number
}>()

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void
}>()

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
})
</script>

<template>
  <textarea v-model="modelValue" :class="cn('flex min-h-20 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', props.class)" />
</template>

================
File: src/components/ui/toast/index.ts
================
import type { ToastRootProps } from 'radix-vue'
import type { HTMLAttributes } from 'vue'

export { default as Toast } from './Toast.vue'
export { default as ToastAction } from './ToastAction.vue'
export { default as ToastClose } from './ToastClose.vue'
export { default as ToastDescription } from './ToastDescription.vue'
export { default as Toaster } from './Toaster.vue'
export { default as ToastProvider } from './ToastProvider.vue'
export { default as ToastTitle } from './ToastTitle.vue'
export { default as ToastViewport } from './ToastViewport.vue'
export { toast, useToast } from './use-toast'

import { cva, type VariantProps } from 'class-variance-authority'

export const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[--radix-toast-swipe-end-x] data-[swipe=move]:translate-x-[--radix-toast-swipe-move-x] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
                    'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

type ToastVariants = VariantProps<typeof toastVariants>

export interface ToastProps extends ToastRootProps {
  class?: HTMLAttributes['class']
  variant?: ToastVariants['variant']
  onOpenChange?: ((value: boolean) => void) | undefined
}

================
File: src/components/ui/toast/Toast.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastRoot, type ToastRootEmits, useForwardPropsEmits } from 'radix-vue'
import { computed } from 'vue'
import { type ToastProps, toastVariants } from '.'

const props = defineProps<ToastProps>()

const emits = defineEmits<ToastRootEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <ToastRoot
    v-bind="forwarded"
    :class="cn(toastVariants({ variant }), props.class)"
    @update:open="onOpenChange"
  >
    <slot />
  </ToastRoot>
</template>

================
File: src/components/ui/toast/ToastAction.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastAction, type ToastActionProps } from 'radix-vue'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastActionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastAction v-bind="delegatedProps" :class="cn('inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive', props.class)">
    <slot />
  </ToastAction>
</template>

================
File: src/components/ui/toast/ToastClose.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { X } from 'lucide-vue-next'
import { ToastClose, type ToastCloseProps } from 'radix-vue'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastCloseProps & {
  class?: HTMLAttributes['class']
}>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastClose v-bind="delegatedProps" :class="cn('absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600', props.class)">
    <X class="h-4 w-4" />
  </ToastClose>
</template>

================
File: src/components/ui/toast/ToastDescription.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastDescription, type ToastDescriptionProps } from 'radix-vue'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastDescriptionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastDescription :class="cn('text-sm opacity-90', props.class)" v-bind="delegatedProps">
    <slot />
  </ToastDescription>
</template>

================
File: src/components/ui/toast/Toaster.vue
================
<script setup lang="ts">
import { isVNode } from 'vue'
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from '.'
import { useToast } from './use-toast'

const { toasts } = useToast()
</script>

<template>
  <ToastProvider>
    <Toast v-for="toast in toasts" :key="toast.id" v-bind="toast">
      <div class="grid gap-1">
        <ToastTitle v-if="toast.title">
          {{ toast.title }}
        </ToastTitle>
        <template v-if="toast.description">
          <ToastDescription v-if="isVNode(toast.description)">
            <component :is="toast.description" />
          </ToastDescription>
          <ToastDescription v-else>
            {{ toast.description }}
          </ToastDescription>
        </template>
        <ToastClose />
      </div>
      <component :is="toast.action" />
    </Toast>
    <ToastViewport />
  </ToastProvider>
</template>

================
File: src/components/ui/toast/ToastProvider.vue
================
<script setup lang="ts">
import { ToastProvider, type ToastProviderProps } from 'radix-vue'

const props = defineProps<ToastProviderProps>()
</script>

<template>
  <ToastProvider v-bind="props">
    <slot />
  </ToastProvider>
</template>

================
File: src/components/ui/toast/ToastTitle.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastTitle, type ToastTitleProps } from 'radix-vue'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastTitleProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastTitle v-bind="delegatedProps" :class="cn('text-sm font-semibold', props.class)">
    <slot />
  </ToastTitle>
</template>

================
File: src/components/ui/toast/ToastViewport.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastViewport, type ToastViewportProps } from 'radix-vue'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastViewportProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastViewport v-bind="delegatedProps" :class="cn('fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]', props.class)" />
</template>

================
File: src/components/ui/toast/use-toast.ts
================
import type { Component, VNode } from 'vue'
import type { ToastProps } from '.'
import { computed, ref } from 'vue'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

export type StringOrVNode =
  | string
  | VNode
  | (() => VNode)

type ToasterToast = ToastProps & {
  id: string
  title?: string
  description?: StringOrVNode
  action?: Component
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
    type: ActionType['ADD_TOAST']
    toast: ToasterToast
  }
  | {
    type: ActionType['UPDATE_TOAST']
    toast: Partial<ToasterToast>
  }
  | {
    type: ActionType['DISMISS_TOAST']
    toastId?: ToasterToast['id']
  }
  | {
    type: ActionType['REMOVE_TOAST']
    toastId?: ToasterToast['id']
  }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

function addToRemoveQueue(toastId: string) {
  if (toastTimeouts.has(toastId))
    return

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: actionTypes.REMOVE_TOAST,
      toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

const state = ref<State>({
  toasts: [],
})

function dispatch(action: Action) {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      state.value.toasts = [action.toast, ...state.value.toasts].slice(0, TOAST_LIMIT)
      break

    case actionTypes.UPDATE_TOAST:
      state.value.toasts = state.value.toasts.map(t =>
        t.id === action.toast.id ? { ...t, ...action.toast } : t,
      )
      break

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      }
      else {
        state.value.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      state.value.toasts = state.value.toasts.map(t =>
        t.id === toastId || toastId === undefined
          ? {
              ...t,
              open: false,
            }
          : t,
      )
      break
    }

    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined)
        state.value.toasts = []
      else
        state.value.toasts = state.value.toasts.filter(t => t.id !== action.toastId)

      break
  }
}

function useToast() {
  return {
    toasts: computed(() => state.value.toasts),
    toast,
    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  }
}

type Toast = Omit<ToasterToast, 'id'>

function toast(props: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })

  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open: boolean) => {
        if (!open)
          dismiss()
      },
    },
  })

  return {
    id,
    dismiss,
    update,
  }
}

export { toast, useToast }

================
File: src/components/ArticleCta.vue
================
<script setup lang="ts">
defineProps<{
  link: string
  label: string
  description?: string
  ctaLabel: string
  icon?: string
  secondaryLink?: string
  secondaryLabel?: string
}>()
</script>

<template>
  <div class="my-12 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
    <div class="flex flex-col md:flex-row items-center gap-6">
      <div class="flex-1">
        <h3 class="text-xl font-bold text-blue-900 dark:text-blue-100 mb-2">
          {{ label }}
        </h3>
        <p v-if="description" class="text-blue-700 dark:text-blue-300">
          {{ description }}
        </p>
      </div>
      <div class="flex flex-col sm:flex-row gap-4">
        <a :href="link" class="inline-flex items-center px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-700
                 text-white font-medium transition-colors text-center">
          {{ ctaLabel }}
          <i v-if="icon" :class="icon" class="ml-2" />
        </a>
        <a v-if="secondaryLink && secondaryLabel" :href="secondaryLink" class="inline-flex items-center px-6 py-3 rounded-lg bg-blue-100 dark:bg-blue-800
                 hover:bg-blue-200 dark:hover:bg-blue-700 text-blue-700 dark:text-blue-100
                 font-medium transition-colors text-center">
          {{ secondaryLabel }}
        </a>
      </div>
    </div>
  </div>
</template>

================
File: src/components/ArticleResume.vue
================
<script setup lang="ts">
defineProps<{
  text: string
}>()
</script>

<template>
  <div class="my-6 p-6 bg-gray-50 dark:bg-gray-800 rounded-xl">
    <p class="text-lg text-gray-700 dark:text-gray-300 italic">
      {{ text }}
    </p>
  </div>
</template>

================
File: src/components/ArticleTitle.vue
================
<script setup lang="ts">
defineProps<{
  text: string
}>()
</script>

<template>
  <div class="my-8">
    <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-gray-100">
      {{ text }}
    </h1>
  </div>
</template>

================
File: src/components/Benefits.vue
================
<script setup lang="ts">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import {
  TrendingUp,
  Users,
  CalendarClock,
  Wallet,
} from "lucide-vue-next";

interface BenefitsProps {
  icon: string;
  title: string;
  description: string;
}

const benefitList: BenefitsProps[] = [
  {
    icon: "wallet",
    title: "Revenu Récurrent Garanti",
    description:
      "Convertissez vos clients en abonnés et sécurisez un revenu récurrent prévisible.",
  },
  {
    icon: "trendingUp",
    title: "Panier Moyen +10%",
    description:
      "Les abonnés dépensent 10% de plus et sont plus ouverts aux nouveautés.",
  },
  {
    icon: "users",
    title: "Fidélisation Renforcée",
    description:
      "Les abonnements créent une relation durable avec vos clients et encouragent les visites régulières.",
  },
  {
    icon: "calendarClock",
    title: "Meilleure Gestion",
    description:
      "Optimisez vos stocks et votre personnel grâce aux données de fréquentation.",
  },
];

const iconMap: Record<string, any> = {
  trendingUp: TrendingUp,
  users: Users,
  calendarClock: CalendarClock,
  wallet: Wallet,
};
</script>

<template>
  <section id="benefits" class="container py-24 sm:py-32">
    <div class="grid lg:grid-cols-2 place-items-center lg:gap-24">
      <div>
        <h2 class="text-lg text-primary mb-2 tracking-wider">Bénéfices</h2>

        <h2 class="text-3xl md:text-4xl font-bold mb-4">
          Augmentez vos revenus avec des abonnements en magasin
        </h2>
        <p class="text-xl text-muted-foreground mb-8">
          Proposez à vos clients des offres d'abonnement personnalisées et encaissez leurs paiements mensuellement en
          toute simplicité
        </p>
      </div>

      <div class="grid lg:grid-cols-2 gap-4 w-full">
        <Card v-for="({ icon, title, description }, index) in benefitList" :key="title"
          class="bg-muted/50 dark:bg-card hover:bg-background dark:hover:bg-background transition-all delay-75 group/number">
          <CardHeader>
            <div class="flex justify-between">
              <component class="size-8 mb-6 text-primary" :is="iconMap[icon]" />

              <span
                class="text-5xl text-muted-foreground/15 font-medium transition-all delay-75 group-hover/number:text-muted-foreground/30">0{{
                  index + 1
                }}</span>
            </div>

            <CardTitle>{{ title }}</CardTitle>
          </CardHeader>

          <CardContent class="text-muted-foreground">
            {{ description }}
          </CardContent>
        </Card>
      </div>
    </div>
  </section>
</template>

================
File: src/components/Community.vue
================
<script setup lang="ts">
import {
  Card,
  CardHeader,
  CardTitle,
  CardFooter,
  CardContent,
} from "@/components/ui/card";

import { Button } from "@/components/ui/button";

import DiscordIcon from "@/icons/DiscordIcon.vue";
</script>

<template>
  <section
    id="community"
    class="py-12"
  >
    <hr />
    <div class="container py-20 sm:py-20">
      <div class="lg:w-[60%] mx-auto">
        <Card
          class="bg-background shadow-none text-center flex flex-col items-center justify-center border-0"
        >
          <CardHeader>
            <CardTitle class="text-4xl md:text-5xl font-bold">
              <Component
                class="w-20 h-20 m-auto mb-4"
                :is="DiscordIcon"
              />
              Ready to join this
              <span
                class="text-transparent bg-gradient-to-r from-[#D247BF] to-primary bg-clip-text"
              >
                Community?
              </span>
            </CardTitle>
          </CardHeader>
          <CardContent class="lg:w-[80%] text-xl text-muted-foreground">
            Join our vibrant Discord community! Connect, share, and grow with
            like-minded enthusiasts. Click to dive in! 🚀
          </CardContent>

          <CardFooter>
            <Button as-child>
              <a
                href="https://discord.com/"
                target="_blank"
              >
                Join Discord
              </a>
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
    <hr />
  </section>
</template>

================
File: src/components/Contact.vue
================
<script setup lang="ts">
import { ref, reactive } from "vue";
import { Button } from "./ui/button";
import { Card, CardHeader, CardContent, CardFooter } from "./ui/card";
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { Textarea } from "./ui/textarea";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

import { AlertCircle, Building2, Phone, Mail, Clock } from "lucide-vue-next";

interface ContactFormeProps {
  firstName: string;
  lastName: string;
  email: string;
  subject: string;
  message: string;
}

const contactForm = reactive<ContactFormeProps>({
  firstName: "",
  lastName: "",
  email: "",
  subject: "Web Development",
  message: "",
});

const invalidInputForm = ref<boolean>(false);

const handleSubmit = () => {
  const { firstName, lastName, email, subject, message } = contactForm;
  console.log(contactForm);

  const mailToLink = `mailto:leomirandadev@gmail.com?subject=${subject}&body=Hello I am ${firstName} ${lastName}, my Email is ${email}. %0D%0A${message}`;

  window.location.href = mailToLink;
};
</script>

<template>
  <section
    id="contact"
    class="container py-24 sm:py-32"
  >
    <section class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div>
        <div class="mb-4">
          <h2 class="text-lg text-primary mb-2 tracking-wider">Contact</h2>

          <h2 class="text-3xl md:text-4xl font-bold">Connect With Us</h2>
        </div>
        <p class="mb-8 text-muted-foreground lg:w-5/6">
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatum
          ipsam sint enim exercitationem ex autem corrupti quas tenetur
        </p>

        <div class="flex flex-col gap-4">
          <div>
            <div class="flex gap-2 mb-1">
              <Building2 />
              <div class="font-bold">Find Us</div>
            </div>

            <div>742 Evergreen Terrace, Springfield, IL 62704</div>
          </div>

          <div>
            <div class="flex gap-2 mb-1">
              <Phone />
              <div class="font-bold">Call Us</div>
            </div>

            <div>+1 (619) 123-4567</div>
          </div>

          <div>
            <div class="flex gap-2 mb-1">
              <Mail />
              <div class="font-bold">Mail Us</div>
            </div>

            <div>leomirandadev@gmail.com</div>
          </div>

          <div>
            <div class="flex gap-2">
              <Clock />
              <div class="font-bold">Visit Us</div>
            </div>

            <div>
              <div>Monday - Friday</div>
              <div>8AM - 4PM</div>
            </div>
          </div>
        </div>
      </div>

      <!-- form -->
      <Card class="bg-muted/60 dark:bg-card">
        <CardHeader class="text-primary text-2xl"> </CardHeader>
        <CardContent>
          <form
            @submit.prevent="handleSubmit"
            class="grid gap-4"
          >
            <div class="flex flex-col md:flex-row gap-8">
              <div class="flex flex-col w-full gap-1.5">
                <Label for="first-name">First Name</Label>
                <Input
                  id="first-name"
                  type="text"
                  placeholder="Leopoldo"
                  v-model="contactForm.firstName"
                />
              </div>

              <div class="flex flex-col w-full gap-1.5">
                <Label for="last-name">Last Name</Label>
                <Input
                  id="last-name"
                  type="text"
                  placeholder="Miranda"
                  v-model="contactForm.lastName"
                />
              </div>
            </div>

            <div class="flex flex-col gap-1.5">
              <Label for="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="leomirandadev@gmail.com"
                v-model="contactForm.email"
              />
            </div>

            <div class="flex flex-col gap-1.5">
              <Label for="subject">Subject</Label>

              <Select v-model="contactForm.subject">
                <SelectTrigger>
                  <SelectValue placeholder="Select a subject" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="Web Development">
                      Web Development
                    </SelectItem>
                    <SelectItem value="Mobile Development">
                      Mobile Development
                    </SelectItem>
                    <SelectItem value="Figma Design"> Figma Design </SelectItem>
                    <SelectItem value="REST API "> REST API </SelectItem>
                    <SelectItem value="FullStack Project">
                      FullStack Project
                    </SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>

            <div class="flex flex-col gap-1.5">
              <Label for="message">Message</Label>
              <Textarea
                id="message"
                placeholder="Your message..."
                rows="5"
                v-model="contactForm.message"
              />
            </div>

            <Alert
              v-if="invalidInputForm"
              variant="destructive"
            >
              <AlertCircle class="w-4 h-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>
                There is an error in the form. Please check your input.
              </AlertDescription>
            </Alert>

            <Button class="mt-4">Send message</Button>
          </form>
        </CardContent>

        <CardFooter></CardFooter>
      </Card>
    </section>
  </section>
</template>

================
File: src/components/FAQ.vue
================
<script setup lang="ts">
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

interface FAQProps {
  question: string;
  answer: string;
  value: string;
}

const FAQList: FAQProps[] = [
  {
    question: "Comment fonctionne le système de QR code ?",
    answer: "Chaque abonné reçoit un QR code unique lié à son abonnement. Lors de sa visite dans votre commerce, il vous suffit de scanner ce code avec notre application pour vérifier ses droits et valider son passage.",
    value: "item-1",
  },
  {
    question: "Quels types d'abonnements puis-je créer ?",
    answer: "Vous pouvez créer des abonnements très flexibles : quotidiens, hebdomadaires, mensuels, avec des restrictions horaires ou journalières. Par exemple : '1 café par jour', '3 passages par semaine', 'Accès illimité le matin', etc.",
    value: "item-2",
  },
  {
    question: "Comment sont gérés les paiements ?",
    answer: "Nous utilisons Stripe pour gérer tous les paiements de manière sécurisée. Les paiements sont automatiquement prélevés et vous êtes payé directement sur votre compte bancaire, moins notre commission de 5%.",
    value: "item-3",
  },
  {
    question: "Puis-je gérer plusieurs points de vente ?",
    answer: "Oui, vous pouvez gérer plusieurs points de vente depuis un seul compte.",
    value: "item-4",
  },
  {
    question: "Comment sont gérées les statistiques ?",
    answer: "Notre tableau de bord vous permet de suivre en temps réel le nombre d'abonnés actifs, les passages quotidiens, les revenus générés, et d'identifier les formules les plus populaires pour optimiser votre offre.",
    value: "item-5",
  },
  {
    question: "Combien ça coûte ?",
    answer: "Nous ne facturons rien. Vous pouvez utiliser notre application gratuitement et sans engagement, seuls 5% de commission sont prélevés sur les paiements",
    value: "item-6",
  }
];
</script>

<template>
  <section id="faq" class="container md:w-[700px] py-24 sm:py-32">
    <div class="text-center mb-8">
      <h2 class="text-lg text-primary text-center mb-2 tracking-wider">FAQ</h2>

      <h2 class="text-3xl md:text-4xl text-center font-bold">
        Questions Fréquentes
      </h2>
    </div>

    <Accordion type="single" collapsible class="AccordionRoot">
      <AccordionItem v-for="{ question, answer, value } in FAQList" :key="value" :value="value">
        <AccordionTrigger class="text-left"> {{ question }} </AccordionTrigger>

        <AccordionContent>{{ answer }}</AccordionContent>
      </AccordionItem>
    </Accordion>

    <h3 class="font-medium mt-4 text-center">
      Vous avez d'autres questions ?
      <a href="mailto:tech@abonne-moi.com" class="text-primary underline hover:text-primary/80">
        Contactez-nous
      </a>
    </h3>
  </section>
</template>

================
File: src/components/Features.vue
================
<script setup lang="ts">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import {
  QrCode,
  CreditCard,
  Store,
  CalendarClock,
  BarChart3,
  Scan,
  Users,
  ShieldCheck,
} from "lucide-vue-next";

interface FeaturesProps {
  icon: string;
  title: string;
  description: string;
}

const featureList: FeaturesProps[] = [
  {
    icon: "qrCode",
    title: "QR Code Intelligent",
    description:
      "Système de QR code unique pour identifier vos clients et gérer leurs abonnements en toute simplicité depuis votre ordinateur ou votre smartphone.",
  },
  {
    icon: "creditCard",
    title: "Paiements Sécurisés",
    description:
      "Nous gérons les paiements pour vous, vous n'avez plus à vous soucier de la gestion des paiements, des litiges ou de la sécurité des paiements.",
  },
  {
    icon: "store",
    title: "Multi-Commerce",
    description:
      "Solution adaptée à tous types de commerces. Parmi nos clients : boulangeries, bars, instituts de beauté et bien plus encore.",
  },
  {
    icon: "calendarClock",
    title: "Abonnements Flexibles",
    description:
      "Créez des formules personnalisées : par jour, par semaine, par mois, avec des restrictions horaires ou journalières.",
  },
  {
    icon: "barChart3",
    title: "Analyses Détaillées",
    description:
      "Suivez vos performances, analysez les habitudes de vos clients et optimisez vos offres d'abonnement.",
  },
  {
    icon: "scan",
    title: "Scan Instantané",
    description:
      "Interface de scan rapide et intuitive pour vérifier les droits d'accès de vos clients en temps réel.",
  },
];

const iconMap: Record<string, any> = {
  qrCode: QrCode,
  creditCard: CreditCard,
  store: Store,
  calendarClock: CalendarClock,
  barChart3: BarChart3,
  scan: Scan,
  users: Users,
  shieldCheck: ShieldCheck,
};
</script>

<template>
  <section id="features" class="container py-24 sm:py-32">
    <h2 class="text-lg text-primary text-center mb-2 tracking-wider">
      Fonctionnalités
    </h2>

    <h2 class="text-3xl md:text-4xl text-center font-bold mb-4">
      Une solution complète pour Votre Commerce
    </h2>

    <h3 class="md:w-1/2 mx-auto text-xl text-center text-muted-foreground mb-8">
      Créez vos formules d'abonnement, définissez vos règles et nous gérons le reste.
    </h3>

    <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
      <div v-for="{ icon, title, description } in featureList" :key="title">
        <Card class="h-full bg-background border-0 shadow-none">
          <CardHeader class="flex justify-center items-center">
            <div class="bg-primary/20 p-2 rounded-full ring-8 ring-primary/10 mb-4">
              <component :is="iconMap[icon]" class="size-6 text-primary" />
            </div>

            <CardTitle>
              {{ title }}
            </CardTitle>
          </CardHeader>

          <CardContent class="text-muted-foreground text-center">
            {{ description }}
          </CardContent>
        </Card>
      </div>
    </div>
  </section>
</template>

<style lang="less" scoped></style>

================
File: src/components/Footer.vue
================
<script setup lang="ts">
import { QrCode } from "lucide-vue-next";
import Separator from "./ui/separator/Separator.vue";
</script>

<template>
  <footer id="footer" class="container py-24 pb-16 sm:py-32 sm:pb-24">
    <div class="p-10 bg-muted/50 dark:bg-card border rounded-2xl">
      <div class="grid grid-cols-2 md:grid-cols-4 xl:grid-cols-6 gap-x-12 gap-y-8">
        <div class="col-span-full xl:col-span-2">
          <a href="#" class="flex font-bold items-center">
            <QrCode
              class="bg-gradient-to-tr from-primary via-primary/70 to-primary rounded-lg w-9 h-9 mr-2 border text-white p-1" />

            <h3 class="text-2xl">Abonne-moi</h3>
          </a>
          <p class="mt-4 text-muted-foreground">
            La solution d'abonnement pour les commerces de proximité
          </p>
        </div>

        <div class="flex flex-col gap-2">
          <h3 class="font-bold text-lg">Produit</h3>
          <div>
            <a href="#features" class="opacity-60 hover:opacity-100">
              Fonctionnalités
            </a>
          </div>

          <div>
            <a href="#pricing" class="opacity-60 hover:opacity-100">
              Tarifs
            </a>
          </div>

          <div>
            <a href="#faq" class="opacity-60 hover:opacity-100">
              FAQ
            </a>
          </div>
        </div>

        <!-- <div class="flex flex-col gap-2">
          <h3 class="font-bold text-lg">Ressources</h3>
          <div>
            <a href="#" class="opacity-60 hover:opacity-100">
              Guide d'utilisation
            </a>
          </div>

          <div>
            <a href="#" class="opacity-60 hover:opacity-100">
              API Documentation
            </a>
          </div>

          <div>
            <a href="#" class="opacity-60 hover:opacity-100">
              Blog
            </a>
          </div>
        </div> -->

        <div class="flex flex-col gap-2">
          <h3 class="font-bold text-lg">Support</h3>
          <div>
            <a href="mailto:tech@abonne-moi.com" class="opacity-60 hover:opacity-100">
              Contact
            </a>
          </div>
        </div>

        <!-- End of grid columns -->
      </div>

      <Separator class="my-6" />
      <section class="text-center text-muted-foreground">
        <h3>
          &copy; 2024 Abonne-moi - Tous droits réservés
        </h3>
      </section>
    </div>
  </footer>
</template>

================
File: src/components/Hero.vue
================
<script setup lang="ts">

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
</script>

<template>
  <section class="container">
    <div class="grid place-items-center lg:max-w-screen-xl gap-8 mx-auto py-20 md:py-32">
      <div class="text-center space-y-8">
        <Badge variant="outline" class="text-sm py-2">
          <span class="mr-2 text-primary">
            <Badge>Nouveau</Badge>
          </span>
          <span>Créez des forumules d'abonnement en magasin et mensualisez vos revenus</span>
        </Badge>

        <div class="max-w-screen-md mx-auto text-center text-5xl md:text-6xl font-bold">
          <h1>
            Transformez vos clients en
            <span class="text-transparent bg-gradient-to-r from-[#D247BF] to-primary bg-clip-text">abonnés
            </span>
          </h1>
        </div>

        <p class="max-w-screen-sm mx-auto text-xl text-muted-foreground">
          La solution complète pour gérer vos abonnements en magasin. Idéal pour les boulangeries,
          cavistes, cafés, bars et instituts de beauté.
        </p>

        <div class="space-y-4 md:space-y-0 md:space-x-4">
          <!-- <Button class="w-5/6 md:w-1/4 font-bold group/arrow">
            Commencer
            <ArrowRight class="size-5 ml-2 group-hover/arrow:translate-x-1 transition-transform" />
          </Button> -->

          <Button href="#how-it-works" variant="secondary" class="w-5/6 md:w-1/4 font-bold">
            Comment ça marche ?
          </Button>
        </div>
      </div>
    </div>
  </section>
</template>

<style scoped>
.img-shadow-animation {
  animation-name: img-shadow-animation;
  animation-iteration-count: infinite;
  animation-duration: 2s;
  animation-timing-function: linear;
  animation-direction: alternate;
}

.img-border-animation {
  animation-name: img-border-animation;
  animation-iteration-count: infinite;
  animation-duration: 2s;
  animation-timing-function: linear;
  animation-direction: alternate;
}

@keyframes img-shadow-animation {
  from {
    opacity: 0.5;
    transform: translateY(30px);
  }

  to {
    opacity: 1;
    transform: translateY(0px);
  }
}

@keyframes img-border-animation {
  from {
    @apply border-t-primary/10;
  }

  to {
    @apply border-t-primary/60;
  }
}
</style>

================
File: src/components/HowItWorks.vue
================
<script setup lang="ts">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface HowItWorksProps {
  badgeTitle: string;
  title: string;
  description: string;
  image: string;
}

const HowItWorksList: HowItWorksProps[] = [
  {
    badgeTitle: "Étape 1",
    title: "Créez vos formules",
    description:
      "Définissez vos formules d'abonnement selon vos besoins : quotidien, hebdomadaire, mensuel... Ajoutez des restrictions horaires ou journalières pour une flexibilité totale.",
    image: "create-sub.png",
  },
  {
    badgeTitle: "Étape 2",
    title: "Proposez vos abonnements",
    description:
      "Partagez vos formules d'abonnement directement en boutique ou intégrez-les à votre site internet. Nous gérons automatiquement les paiements via Stripe.",
    image: "sell-subs.png",
  },
  {
    badgeTitle: "Étape 3",
    title: "Vos clients s'abonnent",
    description:
      "Vos clients choisissent leur formule et reçoivent instantanément leur QR code personnel. Plus besoin de carte de fidélité physique !",
    image: "payment.png",
  },
  {
    badgeTitle: "Étape 4",
    title: "Scannez et validez",
    description:
      "À chaque visite, scannez simplement le QR code de vos clients. Notre application vérifie instantanément leurs droits et décompte automatiquement leur utilisation.",
    image: "scan.png",
  },
];
</script>

<template>
  <section id="how-it-works" class="container py-24 sm:py-32">
    <div class="text-center mb-12">
      <h2 class="text-lg text-primary text-center mb-2 tracking-wider">
        Comment ça marche
      </h2>

      <h2 class="text-3xl md:text-4xl text-center font-bold">
        Simple pour vous, simple pour vos clients
      </h2>
    </div>

    <div class="lg:w-[80%] mx-auto relative">
      <div v-for="({ badgeTitle, title, description, image }, index) in HowItWorksList" :key="title"
        :class="['flex mb-16 items-center gap-8', { 'flex-row-reverse': index % 2 !== 0 }]">
        <Card class="flex-1 bg-muted/50 dark:bg-card">
          <CardHeader>
            <div class="pb-4">
              <Badge variant="default" class="text-base py-1 px-4">{{ badgeTitle }}</Badge>
            </div>

            <CardTitle class="text-2xl">
              {{ title }}
            </CardTitle>
          </CardHeader>

          <CardContent class="text-muted-foreground text-lg">
            {{ description }}
          </CardContent>
        </Card>

        <div class="flex-1 relative">
          <div class="absolute inset-0 bg-gradient-to-r from-primary/20 to-primary/5 rounded-full blur-3xl"></div>
          <img :src="image" :alt="`${title}`" class="relative w-full max-w-[300px] mx-auto rounded-sm" />
        </div>
      </div>
    </div>
  </section>
</template>

<style scoped>
.gradient-blur {
  filter: blur(100px);
  transform: translateZ(0);
}
</style>

================
File: src/components/Navbar.vue
================
<script lang="ts" setup>
import { ref } from "vue";

import { useColorMode } from "@vueuse/core";
const mode = useColorMode();
mode.value = "dark";

import {
  NavigationMenu,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
} from "@/components/ui/navigation-menu";
import {
  Sheet,
  SheetContent,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";

import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";

import { QrCode, Menu } from "lucide-vue-next";
import ToggleTheme from "./ToggleTheme.vue";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { useToast } from "@/components/ui/toast/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface RouteProps {
  href: string;
  label: string;
}

const routeList: RouteProps[] = [
  {
    href: "/#benefits",
    label: "Avantages"
  },
  {
    href: "/#features",
    label: "Fonctionnalités",
  },
  {
    href: "/#how-it-works",
    label: "Comment ça marche ?",
  },
  {
    href: "/#faq",
    label: "FAQ",
  },
];

const isOpen = ref<boolean>(false);

const { toast } = useToast();

const industries = [
  "Boulangerie",
  "Cave à vin",
  "Café / Bar",
  "Restaurant",
  "Institut de beauté",
  "Autre"
];

const formData = ref({
  name: '',
  industry: '',
  email: '',
  phone: ''
});

const isLoading = ref(false);
const showForm = ref(false);

function validatePhone(phone: string) {
  if (!phone) return true; // Vide est ok si l'email est rempli
  const phoneRegex = /^(?:(?:\+|00)33|0)\s*[1-9](?:[\s.-]*\d{2}){4}$/;
  return phoneRegex.test(phone);
}

function validateEmail(email: string) {
  if (!email) return true; // Vide est ok si le téléphone est rempli
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

async function handleSubmit() {
  // Vérifier qu'au moins un moyen de contact est fourni
  if (!formData.value.email && !formData.value.phone) {
    toast({
      variant: "destructive",
      title: "Erreur de validation",
      description: "Veuillez fournir au moins un moyen de contact (email ou téléphone)"
    });
    return;
  }

  // Valider le téléphone s'il est rempli
  if (formData.value.phone && !validatePhone(formData.value.phone)) {
    toast({
      variant: "destructive",
      title: "Erreur de validation",
      description: "Numéro de téléphone invalide (format français)"
    });
    return;
  }

  // Valider l'email s'il est rempli
  if (formData.value.email && !validateEmail(formData.value.email)) {
    toast({
      variant: "destructive",
      title: "Erreur de validation",
      description: "Format d'email invalide"
    });
    return;
  }

  isLoading.value = true;
  try {
    await fetch('https://automation.nicolasaubrun.com/webhook/abonne-moi/new-lead', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData.value)
    });

    showForm.value = false;
    formData.value = { name: '', industry: '', email: '', phone: '' };

    toast({
      title: "Demande envoyée !",
      description: "Nous vous contacterons très prochainement."
    });
  } catch (error) {
    toast({
      variant: "destructive",
      title: "Erreur",
      description: "Une erreur est survenue. Veuillez réessayer."
    });
  } finally {
    isLoading.value = false;
  }
}
</script>

<template>
  <header :class="{
    'shadow-light': mode === 'light',
    'shadow-dark': mode === 'dark',
    'w-[90%] md:w-[70%] lg:w-[75%] lg:max-w-screen-xl top-5 mx-auto sticky border z-40 rounded-2xl flex justify-between items-center p-2 bg-card shadow-md': true,
  }">
    <a href="/" class="font-bold text-lg flex items-center">
      <QrCode
        class="bg-gradient-to-tr from-primary via-primary/70 to-primary rounded-lg w-9 h-9 mr-2 border text-white p-1" />
      Abonne-moi
    </a>
    <!-- Mobile -->
    <div class="flex items-center lg:hidden">
      <Sheet v-model:open="isOpen">
        <SheetTrigger as-child>
          <Menu @click="isOpen = true" class="cursor-pointer" />
        </SheetTrigger>

        <SheetContent side="left" class="flex flex-col justify-between rounded-tr-2xl rounded-br-2xl bg-card">
          <div>
            <SheetHeader class="mb-4 ml-4">
              <SheetTitle class="flex items-center">
                <a href="/" class="flex items-center">
                  <QrCode
                    class="bg-gradient-to-tr from-primary/70 via-primary to-primary/70 rounded-lg size-9 mr-2 border text-white p-1" />
                  Abonne-moi
                </a>
              </SheetTitle>
            </SheetHeader>

            <div class="flex flex-col gap-2">
              <Button v-for="{ href, label } in routeList" :key="label" as-child variant="ghost"
                class="justify-start text-base">
                <a @click="isOpen = false" :href="href">
                  {{ label }}
                </a>
              </Button>
            </div>
          </div>

          <SheetFooter class="flex-col sm:flex-col justify-start items-start">
            <Separator class="mb-2" />
            <ToggleTheme />
          </SheetFooter>
        </SheetContent>
      </Sheet>
    </div>

    <!-- Desktop -->
    <NavigationMenu class="hidden lg:block">
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuLink asChild>
            <Button v-for="{ href, label } in routeList" :key="label" as-child variant="ghost"
              class="justify-start text-base">
              <a :href="href">
                {{ label }}
              </a>
            </Button>
          </NavigationMenuLink>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>

    <div class="hidden lg:flex items-center gap-4">
      <ToggleTheme />
      <div class="relative flex gap-2">
        <Button @click="showForm = !showForm" variant="outline" class="font-semibold">
          S'inscrire
        </Button>

        <Button href="https://app.abonne-moi.com" variant="default" class="font-semibold">
          Se connecter
        </Button>

        <Card v-if="showForm" class="absolute right-0 top-12 w-80 p-4 z-50">
          <form @submit.prevent="handleSubmit" class="space-y-4">
            <span class="text-sm text-muted-foreground mb-8">
              Nous créons les comptes clients avec vous pour vous aider à prendre en main l'outil. Laissez-nous
              un moyen de vous contacter.
            </span>
            <div>
              <Input v-model="formData.name" placeholder="Nom de votre entreprise" required />
            </div>
            <div>
              <Select v-model="formData.industry" required>
                <SelectTrigger>
                  <SelectValue placeholder="Sélectionnez votre industrie" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem v-for="industry in industries" :key="industry" :value="industry">
                    {{ industry }}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Input v-model="formData.email" type="email" placeholder="Email" />
            </div>
            <div>
              <Input v-model="formData.phone" type="tel" placeholder="Téléphone (format français)" />
            </div>
            <p class="text-xs text-muted-foreground">Au moins un moyen de contact est requis</p>
            <Button type="submit" class="w-full" :disabled="isLoading">
              {{ isLoading ? 'Envoi...' : 'Envoyer' }}
            </Button>
          </form>
        </Card>
      </div>
    </div>
  </header>
</template>

<style scoped>
.shadow-light {
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.085);
}

.shadow-dark {
  box-shadow: inset 0 0 5px rgba(255, 255, 255, 0.141);
}
</style>

================
File: src/components/Pricing.vue
================
<script setup lang="ts">
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import { Check } from "lucide-vue-next";

enum PopularPlan {
  NO = 0,
  YES = 1,
}

interface PlanProps {
  title: string;
  popular: PopularPlan;
  price: number;
  description: string;
  buttonText: string;
  benefitList: string[];
}

const plans: PlanProps[] = [
  {
    title: "Starter",
    popular: 0,
    price: 29,
    description:
      "Idéal pour les petits commerces qui débutent avec les abonnements.",
    buttonText: "Commencer gratuitement",
    benefitList: [
      "Jusqu'à 50 abonnés",
      "QR Code illimités",
      "Interface de scan",
      "Paiements Stripe",
      "Support par email",
    ],
  },
  {
    title: "Pro",
    popular: 1,
    price: 79,
    description:
      "Pour les commerces qui veulent développer leur base d'abonnés.",
    buttonText: "Essai gratuit de 14 jours",
    benefitList: [
      "Abonnés illimités",
      "Formules personnalisées",
      "Analyses avancées",
      "Support prioritaire",
      "Multi-points de vente",
    ],
  },
  {
    title: "Entreprise",
    popular: 0,
    price: 199,
    description:
      "Solution sur mesure pour les grandes enseignes et franchises.",
    buttonText: "Contactez-nous",
    benefitList: [
      "Tout du plan Pro",
      "API personnalisée",
      "Intégration CRM",
      "Support dédié 24/7",
      "Formation équipe",
    ],
  },
];
</script>

<template>
  <section class="container py-24 sm:py-32">
    <h2 class="text-lg text-primary text-center mb-2 tracking-wider">
      Tarifs
    </h2>

    <h2 class="text-3xl md:text-4xl text-center font-bold mb-4">
      Une offre adaptée à chaque commerce
    </h2>

    <h3 class="md:w-1/2 mx-auto text-xl text-center text-muted-foreground pb-14">
      Commencez gratuitement et évoluez avec nous. Commission de 5% sur les transactions.
    </h3>

    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-4">
      <Card v-for="{
        title,
        popular,
        price,
        description,
        buttonText,
        benefitList,
      } in plans" :key="title" :class="{
        'drop-shadow-xl shadow-black/10 dark:shadow-white/10 border-[1.5px] border-primary lg:scale-[1.1]':
          popular === PopularPlan?.YES,
      }">
        <CardHeader>
          <CardTitle class="pb-2">
            {{ title }}
          </CardTitle>

          <CardDescription class="pb-4">{{ description }}</CardDescription>

          <div>
            <span class="text-3xl font-bold">{{ price }}€</span>
            <span class="text-muted-foreground"> /mois</span>
          </div>
        </CardHeader>

        <CardContent class="flex">
          <div class="space-y-4">
            <span v-for="benefit in benefitList" :key="benefit" class="flex">
              <Check class="text-primary mr-2" />
              <h3>{{ benefit }}</h3>
            </span>
          </div>
        </CardContent>

        <CardFooter>
          <Button :variant="popular === PopularPlan?.NO ? 'secondary' : 'default'" class="w-full">
            {{ buttonText }}
          </Button>
        </CardFooter>
      </Card>
    </div>
  </section>
</template>

================
File: src/components/Sponsors.vue
================
<script setup lang="ts">
import { Marquee } from "@selemondev/vue3-marquee";
import "@selemondev/vue3-marquee/dist/style.css";

import {
  Wine,
  Footprints,
  Scissors,
  Coffee,
  Croissant,
  Beer,
  Sparkles,
  Sandwich,
  Dumbbell,
  Flower2,
} from "lucide-vue-next";

interface ClientProps {
  icon: string;
  name: string;
  location: string;
}

const clients: ClientProps[] = [
  {
    icon: "wine",
    name: "La Cave du Coin",
    location: "Cachan",
  },
  {
    icon: "footprints",
    name: "Élégance Chaussures",
    location: "Courbevoie",
  },
  {
    icon: "sparkles",
    name: "Beauty Nails",
    location: "Neuilly-sur-Seine",
  },
  {
    icon: "coffee",
    name: "Le Petit Café",
    location: "Paris 11ème",
  },
  {
    icon: "croissant",
    name: "Boulangerie Martin",
    location: "Boulogne",
  },
  {
    icon: "beer",
    name: "Le Comptoir",
    location: "Levallois",
  },
  {
    icon: "scissors",
    name: "Coiffure & Style",
    location: "Asnières",
  },
  {
    icon: "sandwich",
    name: "Le Gourmet",
    location: "Paris 15ème",
  },
  {
    icon: "dumbbell",
    name: "FitClub",
    location: "Puteaux",
  },
  {
    icon: "flower2",
    name: "Fleurs & Passion",
    location: "Saint-Cloud",
  },
  {
    icon: "coffee",
    name: "Café des Arts",
    location: "Paris 6ème",
  },
  {
    icon: "wine",
    name: "Vins & Terroirs",
    location: "Suresnes",
  },
  {
    icon: "croissant",
    name: "La Tradition",
    location: "Clichy",
  },
  {
    icon: "sparkles",
    name: "Institut Beauté",
    location: "Paris 17ème",
  },
  {
    icon: "beer",
    name: "Brasserie du Marché",
    location: "Issy",
  },
  {
    icon: "shoe",
    name: "Chaussures Design",
    location: "La Défense",
  },
  {
    icon: "scissors",
    name: "Le Salon",
    location: "Paris 8ème",
  },
  {
    icon: "flower2",
    name: "Au Jardin Fleuri",
    location: "Rueil",
  },
  {
    icon: "sandwich",
    name: "Saveurs & Co",
    location: "Paris 9ème",
  },
  {
    icon: "dumbbell",
    name: "Sport Studio",
    location: "Nanterre",
  },
];

const iconMap: Record<string, any> = {
  wine: Wine,
  footprints: Footprints,
  scissors: Scissors,
  coffee: Coffee,
  croissant: Croissant,
  beer: Beer,
  sparkles: Sparkles,
  sandwich: Sandwich,
  dumbbell: Dumbbell,
  flower2: Flower2,
};
</script>

<template>
  <section id="clients" class="max-w-[90%] mx-auto pb-24 sm:pb-32">
    <h2 class="text-lg md:text-xl text-center mb-2 text-primary tracking-wider">Ils nous font confiance</h2>
    <h3 class="text-3xl md:text-4xl text-center font-bold mb-12">
      Rejoignez plus de 50 commerces
    </h3>

    <div class="mx-auto">
      <Marquee class="gap-[4rem]" :pauseOnHover="true" :fade="true" :duration="100" innerClassName="gap-[4rem]">
        <div v-for="{ icon, name, location } in clients" :key="name">
          <div
            class="flex items-center min-w-[300px] bg-muted/50 dark:bg-card rounded-lg p-4 hover:bg-muted/80 transition-colors">
            <component :is="iconMap[icon]" class="mr-4 text-primary size-8 shrink-0" />
            <div class="min-w-[200px]">
              <div class="font-medium text-xl whitespace-nowrap">{{ name }}</div>
              <div class="text-sm text-muted-foreground">{{ location }}</div>
            </div>
          </div>
        </div>
      </Marquee>
    </div>
  </section>
</template>

<style scoped>
.v3-marquee {
  --duration: 100s !important;
}
</style>

================
File: src/components/Team.vue
================
<script setup lang="ts">
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";

import LinkedInIcon from "@/icons/LinkedInIcon.vue";
import GithubIcon from "@/icons/GithubIcon.vue";
import XIcon from "@/icons/XIcon.vue";

interface TeamProps {
  imageUrl: string;
  firstName: string;
  lastName: string;
  positions: string[];
  socialNetworks: SocialNetworkProps[];
}

interface SocialNetworkProps {
  name: string;
  url: string;
}

const teamList: TeamProps[] = [
  {
    imageUrl: "https://i.pravatar.cc/250?img=58",
    firstName: "Leo",
    lastName: "Miranda",
    positions: ["Vue Fronted Developer", "Creator Of This Website"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "Github",
        url: "https://github.com/leoMirandaa",
      },
      {
        name: "X",
        url: "https://x.com/leo_mirand4",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1534528741775-53994a69daeb?q=80&w=1528&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Elizabeth",
    lastName: "Moore",
    positions: ["UI/UX Designer"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "X",
        url: "https://x.com/leo_mirand4",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1527980965255-d3b416303d12?q=80&w=1760&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "David",
    lastName: "Diaz",
    positions: ["Machine Learning Engineer", "TensorFlow Tinkerer"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "Github",
        url: "https://github.com/leoMirandaa",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1573497161161-c3e73707e25c?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Sarah",
    lastName: "Robinson",
    positions: ["Cloud Native Developer", " Kubernetes Orchestrator"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "Github",
        url: "https://github.com/leoMirandaa",
      },
      {
        name: "X",
        url: "https://x.com/leo_mirand4",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1616805765352-beedbad46b2a?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Michael",
    lastName: "Holland",
    positions: ["DevOps Engineer", "CI/CD Pipeline Mastermind"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Zoe",
    lastName: "Garcia",
    positions: ["JavaScript Evangelist", "Deno Champion"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "Github",
        url: "https://github.com/leoMirandaa",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1633332755192-727a05c4013d?q=80&w=1480&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Evan",
    lastName: "James",
    positions: ["Backend Developer"],
    socialNetworks: [
      {
        name: "LinkedIn",
        url: "https://www.linkedin.com/in/leopoldo-miranda/",
      },
      {
        name: "Github",
        url: "https://github.com/leoMirandaa",
      },
      {
        name: "X",
        url: "https://x.com/leo_mirand4",
      },
    ],
  },
  {
    imageUrl:
      "https://images.unsplash.com/photo-1573497019236-17f8177b81e8?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3Dhttps://images.unsplash.com/photo-1573497019236-17f8177b81e8?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    firstName: "Pam",
    lastName: "Taylor",
    positions: ["Fullstack developer", "UX Researcher"],
    socialNetworks: [
      {
        name: "X",
        url: "https://x.com/leo_mirand4",
      },
    ],
  },
];

const socialIcon = (socialName: string) => {
  switch (socialName) {
    case "LinkedIn":
      return LinkedInIcon;

    case "Github":
      return GithubIcon;

    case "X":
      return XIcon;
  }
};
</script>

<template>
  <section
    id="team"
    class="container lg:w-[75%] py-24 sm:py-32"
  >
    <div class="text-center mb-8">
      <h2 class="text-lg text-primary text-center mb-2 tracking-wider">Team</h2>

      <h2 class="text-3xl md:text-4xl text-center font-bold">
        The Company Dream Team
      </h2>
    </div>

    <div
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"
    >
      <Card
        v-for="{
          imageUrl,
          firstName,
          lastName,
          positions,
          socialNetworks,
        } in teamList"
        :key="imageUrl"
        class="bg-muted/60 dark:bg-card flex flex-col h-full overflow-hidden group/hoverimg"
      >
        <CardHeader class="p-0 gap-0">
          <div class="h-full overflow-hidden">
            <img
              :src="imageUrl"
              alt=""
              class="w-full aspect-square object-cover saturate-0 transition-all duration-200 ease-linear size-full group-hover/hoverimg:saturate-100 group-hover/hoverimg:scale-[1.01]"
            />
          </div>
          <CardTitle class="py-6 pb-4 px-6"
            >{{ firstName }}
            <span class="text-primary">{{ lastName }}</span>
          </CardTitle>
        </CardHeader>

        <CardContent
          v-for="(position, index) in positions"
          :key="index"
          :class="{
            'pb-0 text-muted-foreground ': true,
            'pb-4': index === positions.length - 1,
          }"
        >
          {{ position }}<span v-if="index < positions.length - 1">,</span>
        </CardContent>

        <CardFooter class="space-x-4 mt-auto">
          <a
            v-for="{ name, url } in socialNetworks"
            key="name"
            :href="url"
            target="_blank"
            class="hover:opacity-80 transition-all"
            :aria-label="`Visit our ${name} page`"
          >
            <component :is="socialIcon(name)" />
          </a>
        </CardFooter>
      </Card>
    </div>
  </section>
</template>

================
File: src/components/Testimonials.vue
================
<script setup lang="ts">
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

import { Star } from "lucide-vue-next";

interface ReviewProps {
  image: string;
  name: string;
  userName: string;
  comment: string;
  rating: number;
}

const reviewList: ReviewProps[] = [
  {
    image: "https://github.com/shadcn.png",
    name: "John Doe",
    userName: "Product Manager",
    comment:
      "Wow Vue + Shadcn-Vue is awesome!. This template lets me change colors, fonts and images to match my brand identity. ",
    rating: 5.0,
  },
  {
    image: "https://github.com/shadcn.png",
    name: "Sophia Collins",
    userName: "Cybersecurity Analyst",
    comment:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna. ",
    rating: 4.8,
  },

  {
    image: "https://github.com/shadcn.png",
    name: "Adam Johnson",
    userName: "Chief Technology Officer",
    comment:
      "Lorem ipsum dolor sit amet,exercitation. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
    rating: 4.9,
  },
  {
    image: "https://github.com/shadcn.png",
    name: "Ethan Parker",
    userName: "Data Scientist",
    comment:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod labore et dolore magna aliqua. Ut enim ad minim veniam.",
    rating: 5.0,
  },
  {
    image: "https://github.com/shadcn.png",
    name: "Ava Mitchell",
    userName: "IT Project Manager",
    comment:
      "Lorem ipsum dolor sit amet, tempor incididunt  aliqua. Ut enim ad minim veniam, quis nostrud incididunt consectetur adipiscing elit.",
    rating: 5.0,
  },
  {
    image: "https://github.com/shadcn.png",
    name: "Isabella Reed",
    userName: "DevOps Engineer",
    comment:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
    rating: 4.9,
  },
];
</script>

<template>
  <section
    id="testimonials"
    class="container py-24 sm:py-32"
  >
    <div class="text-center mb-8">
      <h2 class="text-lg text-primary text-center mb-2 tracking-wider">
        Testimonials
      </h2>

      <h2 class="text-3xl md:text-4xl text-center font-bold mb-4">
        Hear What Our 1000+ Clients Say
      </h2>
    </div>

    <Carousel
      :opts="{
        align: 'start',
      }"
      class="relative w-[80%] sm:w-[90%] lg:max-w-screen-xl mx-auto"
    >
      <CarouselContent>
        <CarouselItem
          v-for="review in reviewList"
          :key="review.name"
          class="md:basis-1/2 lg:basis-1/3"
        >
          <Card class="bg-muted/50 dark:bg-card">
            <CardContent class="pt-6 pb-0">
              <div class="flex gap-1 pb-6">
                <Star class="size-4 fill-primary text-primary" />
                <Star class="size-4 fill-primary text-primary" />
                <Star class="size-4 fill-primary text-primary" />
                <Star class="size-4 fill-primary text-primary" />
                <Star class="size-4 fill-primary text-primary" />
              </div>

              "{{ review.comment }}"
            </CardContent>

            <CardHeader>
              <div class="flex flex-row items-center gap-4">
                <Avatar>
                  <AvatarImage
                    src="https://www.radix-vue.com/logo.svg"
                    alt="@radix-vue"
                  />
                  <AvatarFallback>SV</AvatarFallback>
                </Avatar>

                <div class="flex flex-col">
                  <CardTitle class="text-lg">{{ review.name }}</CardTitle>
                  <CardDescription>{{ review.userName }}</CardDescription>
                </div>
              </div>
            </CardHeader>
          </Card>
        </CarouselItem>
      </CarouselContent>
      <CarouselPrevious />
      <CarouselNext />
    </Carousel>
  </section>
</template>

================
File: src/components/ToggleTheme.vue
================
<script setup lang="ts">
import { useColorMode } from "@vueuse/core";
const mode = useColorMode();
import { Button } from "@/components/ui/button";
import { Moon, Sun } from "lucide-vue-next";
</script>

<template>
  <Button
    @click="mode = mode === 'dark' ? 'light' : 'dark'"
    size="sm"
    variant="ghost"
    class="w-full justify-start"
  >
    <div
      v-if="mode == 'light'"
      class="flex gap-2"
    >
      <Moon class="size-5" />
      <span class="block lg:hidden"> Dark </span>
    </div>

    <div
      v-else="mode == 'dark'"
      class="flex gap-2"
    >
      <Sun class="size-5" />
      <span class="block lg:hidden">Light</span>
    </div>

    <span class="sr-only">Toggle theme</span>
  </Button>
</template>

================
File: src/composables/useBlogPosts.ts
================
// src/composables/useBlogPosts.ts
import { ref } from 'vue'
import frontMatter from 'front-matter'
import MarkdownIt from 'markdown-it'

const md = new MarkdownIt({
  html: true,
  breaks: true,
  linkify: true,
})

// Custom renderer for components
md.renderer.rules.html_block = function(tokens, idx) {
  const content = tokens[idx].content

  // Keep components as is instead of escaping them
  if (content.includes('<Article')) {
    return content
  }

  // Default HTML rendering
  return tokens[idx].content
}

export function useBlogPosts() {
  const posts = ref([])

  async function loadPosts() {
    const blogFiles = import.meta.glob('../content/blog/*.md', {
      eager: true,
      query: '?raw',
      import: 'default'
    })

    posts.value = Object.entries(blogFiles).map(([path, content]) => {
      const slug = path.split('/').pop()?.replace('.md', '') || ''
      const { attributes, body } = frontMatter(content as string)
      const renderedContent = md.render(body)

      return {
        slug,
        ...(attributes as any),
        content: renderedContent
      }
    })
  }

  loadPosts()

  return {
    posts
  }
}

================
File: src/content/blog/abonnements-pour-les-boulangeries.md
================
---
title: Pourquoi les Boulangeries devraient proposer des formules d'abonnement
excerpt: Dans un marché où la fidélisation des clients est essentielle, les abonnements sont devenus une stratégie précieuse pour garantir des revenus récurrents et une clientèle fidèle.
date: 2024-11-01
readTime: 10 min read
coverImage: https://www.static.abonne-moi.com/blog-boulangerie.jpg
author:
  name: Nicolas
  img: https://www.static.abonne-moi.com/call%20%3A%20appel%20.png
categories:
  - Boulangerie
  - Stratégie
  - Marketing
---

<ArticleTitle text="Pourquoi les Boulangeries devraient proposer des formules d'abonnement" />

<ArticleResume text="Dans un marché où la fidélisation des clients est essentielle, les abonnements sont devenus une stratégie précieuse pour garantir des revenus récurrents et une clientèle fidèle. C'est là que le micro-SaaS Abonne-moi entre en jeu, permettant aux boulangeries et autres commerces de proximité de créer facilement des formules d'abonnement adaptées à leur clientèle. Aujourd'hui, découvrons comment les boulangeries peuvent bénéficier de ces abonnements." />

## Les Avantages des Abonnements pour une Boulangerie

Pour une boulangerie de quartier, proposer un abonnement présente de nombreux avantages : non seulement cela assure une source de revenu constante, mais cela encourage également les clients à revenir régulièrement. Des abonnements comme "une baguette par jour" ou "formules déjeuner hebdomadaires" fidélisent les clients tout en simplifiant leur expérience d'achat.

## Générer des Revenus Récurrents avec un Abonnement "Une Baguette par Jour"

Imaginons qu'un client fidèle choisisse l'abonnement "Une Baguette par Jour" pour un tarif de 25 euros par mois. Ce tarif attractif (moins de 1 euro par baguette) assure au client une baguette fraîche chaque jour, tout en garantissant à la boulangerie un revenu mensuel stable. Cet abonnement donne aussi un sentiment d'appartenance et d'exclusivité aux clients, qui se sentiront privilégiés en récupérant leur baguette quotidienne.

## Augmenter le Panier Moyen avec des Abonnements de Repas

Les abonnements de repas, tels que "3 ou 4 formules déjeuner par semaine", offrent également une opportunité d'augmenter le panier moyen. Un abonnement déjeuner hebdomadaire à un prix compétitif pourrait comprendre un sandwich, une pâtisserie, et une boisson pour environ 10 euros par formule. En plus de cette formule, les clients réguliers sont souvent tentés d'ajouter d'autres produits, ce qui fait grimper leur panier moyen.

## Des Options Flexibles pour Fidéliser Encore Plus de Clients

Avec _Abonne-moi_, une boulangerie peut définir ses abonnements avec une flexibilité maximale, en proposant par exemple :

- 1 baguette par jour du lundi au vendredi
- 3 formules déjeuner utilisables chaque semaine
- Un panier de viennoiseries tous les samedis matin

Ces options permettent de s'adapter aux différents rythmes de vie de la clientèle, garantissant ainsi leur satisfaction et leur fidélité.

::ArticleCta{:link="/inscription" :label="Lancez votre programme d'abonnement boulangerie" :description="Rejoignez les boulangeries qui fidélisent déjà leur clientèle avec Abonne-moi" :ctaLabel="Je me créé un compte" :icon="i-ph:qr-code" :secondaryLink="/#demo" :secondaryLabel="Découvrir Abonne-Moi en vidéo"}
::

## Comment Fixer le Prix de ses Abonnements pour Maximiser les Bénéfices

Pour qu'un abonnement soit rentable tout en restant attractif, il est essentiel de bien évaluer son prix. Proposer une baguette quotidienne à un prix global de 25 euros par mois assure à la fois un tarif compétitif pour le client (environ 0,83 € par baguette) et un revenu stable pour la boulangerie.

La formule déjeuner, quant à elle, pourrait être proposée à 30 euros pour 3 déjeuners hebdomadaires, assurant ainsi une fidélisation à long terme sans sacrifier la rentabilité. En ajustant les prix pour correspondre aux coûts et aux attentes de la clientèle, une boulangerie maximise ses bénéfices.

## Processus de Mise en Place avec Abonne-moi : Simple et Rapide

Avec _Abonne-moi_, une boulangerie peut facilement lancer son programme d'abonnement. Voici comment :

1. **Inscription et Association de Compte Stripe :** Après inscription sur _Abonne-moi_, la boulangerie lie son compte Stripe pour gérer les paiements.
2. **Création de Produits et Tarifs :** Elle crée l'abonnement "Baguette du jour" et le tarif correspondant. _Abonne-moi_ prélèvera une commission de 5 % sur chaque paiement.
3. **Gestion des Clients et QR Codes :** Les clients abonnés reçoivent un QR code unique à présenter pour récupérer leurs produits.

## Utiliser le QR Code pour Simplifier les Abonnements

Les clients n'ont plus besoin de s'inquiéter des paiements récurrents ou des cartes de fidélité. Grâce au QR code généré par _Abonne-moi_, ils n'ont qu'à le présenter en boutique pour récupérer leur baguette ou leur formule déjeuner, rendant l'expérience client plus fluide et agréable.

## Comment Promouvoir un Abonnement Boulangerie et Attirer de Nouveaux Clients

Pour promouvoir ces abonnements, une boulangerie peut utiliser plusieurs stratégies :

- **Réseaux Sociaux :** Partager des offres spéciales et des témoignages de clients satisfaits sur Facebook, Instagram, et Twitter.
- **Email Marketing :** Envoyer des newsletters aux clients existants pour les informer des nouveaux abonnements.
- **Affichage en Boutique :** Utiliser des affiches et des flyers pour promouvoir les abonnements directement en boutique.
- **Partenariats Locaux :** Collaborer avec des entreprises locales pour offrir des abonnements combinés ou des réductions.

## Pourquoi Choisir Abonne-moi pour les Abonnements Boulangerie ?

Contrairement aux autres solutions, _Abonne-moi_ est conçu pour les commerces de proximité. Son interface simple, la gestion des paiements via Stripe, et l'option de QR codes en font un choix idéal pour les boulangeries qui veulent offrir des abonnements sans complexité.

## Conclusion : L'Avenir des Boulangeries avec les Abonnements

Les abonnements apportent non seulement une stabilité financière, mais aussi une fidélisation durable de la clientèle. Avec _Abonne-moi_, les boulangeries peuvent transformer une simple transaction en une relation de confiance avec leurs clients. Alors, pourquoi ne pas se lancer et découvrir tout ce qu'un abonnement peut apporter à votre boulangerie ?

## Exemples d'abonnements qu'il est possible de proposer dans sa boulangerie

| Formule                           | Récurrence   | Prix conseillé | Description                                                                                               |
| --------------------------------- | ------------ | -------------- | --------------------------------------------------------------------------------------------------------- |
| Une baguette par jour             | Quotidienne  | 25 €/mois      | _Le client se rendra donc en boutique chaque jour pour récupérer sa baguette fraîche._                    |
| 3 formules déjeuner               | Hebdomadaire | 30 €/mois      | _Le client viendra 3 fois par semaine pour récupérer son déjeuner, augmentant ainsi ses achats._          |
| Un panier de viennoiseries        | Hebdomadaire | 20 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de viennoiseries._        |
| 4 formules déjeuner               | Hebdomadaire | 40 €/mois      | _Le client viendra 4 fois par semaine pour récupérer son déjeuner, augmentant ainsi ses achats._          |
| Une pâtisserie par jour           | Quotidienne  | 30 €/mois      | _Le client se rendra donc en boutique chaque jour pour récupérer sa pâtisserie fraîche._                  |
| Un café quotidien                 | Quotidienne  | 20 €/mois      | _Le client se rendra donc en boutique chaque jour pour récupérer son café quotidien._                     |
| Un sandwich par jour              | Quotidienne  | 35 €/mois      | _Le client se rendra donc en boutique chaque jour pour récupérer son sandwich._                           |
| Un panier de produits sucrés      | Hebdomadaire | 25 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits sucrés._      |
| Un panier de produits salés       | Hebdomadaire | 25 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits salés._       |
| Un brunch dominical               | Quotidienne  | 30 €/mois      | _Le client se rendra donc en boutique chaque dimanche pour récupérer son brunch._                         |
| Un goûter quotidien               | Quotidienne  | 20 €/mois      | _Le client se rendra donc en boutique chaque jour pour récupérer son goûter._                             |
| Un panier de produits bio         | Hebdomadaire | 30 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits bio._         |
| Un panier de produits sans gluten | Hebdomadaire | 35 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits sans gluten._ |
| Un panier de produits végétariens | Hebdomadaire | 30 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits végétariens._ |
| Un panier de produits vegan       | Hebdomadaire | 35 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits vegan._       |
| Un panier de produits diététiques | Hebdomadaire | 30 €/mois      | _Le client se rendra en boutique une fois par semaine pour récupérer son panier de produits diététiques._ |

================
File: src/icons/DiscordIcon.vue
================
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"

    viewBox="0 0 24 24"
    fill="currentColor"
    class="icon icon-tabler icons-tabler-filled icon-tabler-brand-discord"
  >
    <path
      stroke="none"
      d="M0 0h24v24H0z"
      fill="none"
    />
    <path
      d="M14.983 3l.123 .006c2.014 .214 3.527 .672 4.966 1.673a1 1 0 0 1 .371 .488c1.876 5.315 2.373 9.987 1.451 12.28c-1.003 2.005 -2.606 3.553 -4.394 3.553c-.732 0 -1.693 -.968 -2.328 -2.045a21.512 21.512 0 0 0 2.103 -.493a1 1 0 1 0 -.55 -1.924c-3.32 .95 -6.13 .95 -9.45 0a1 1 0 0 0 -.55 1.924c.717 .204 1.416 .37 2.103 .494c-.635 1.075 -1.596 2.044 -2.328 2.044c-1.788 0 -3.391 -1.548 -4.428 -3.629c-.888 -2.217 -.39 -6.89 1.485 -12.204a1 1 0 0 1 .371 -.488c1.439 -1.001 2.952 -1.459 4.966 -1.673a1 1 0 0 1 .935 .435l.063 .107l.651 1.285l.137 -.016a12.97 12.97 0 0 1 2.643 0l.134 .016l.65 -1.284a1 1 0 0 1 .754 -.54l.122 -.009zm-5.983 7a2 2 0 0 0 -1.977 1.697l-.018 .154l-.005 .149l.005 .15a2 2 0 1 0 1.995 -2.15zm6 0a2 2 0 0 0 -1.977 1.697l-.018 .154l-.005 .149l.005 .15a2 2 0 1 0 1.995 -2.15z"
    />
  </svg>
</template>

================
File: src/icons/GithubIcon.vue
================
<template>
  <svg
    width="20px"
    height="20px"
    xmlns="http://www.w3.org/2000/svg"
    class="ionicon fill-foreground"
    viewBox="0 0 512 512"
  >
    <path
      d="M256 32C132.3 32 32 134.9 32 261.7c0 101.5 64.2 187.5 153.2 217.9a17.56 17.56 0 003.8.4c8.3 0 11.5-6.1 11.5-11.4 0-5.5-.2-19.9-.3-39.1a102.4 102.4 0 01-22.6 2.7c-43.1 0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1 1.4-14.1h.1c22.5 2 34.3 23.8 34.3 23.8 11.2 19.6 26.2 25.1 39.6 25.1a63 63 0 0025.6-6c2-14.8 7.8-24.9 14.2-30.7-49.7-5.8-102-25.5-102-113.5 0-25.1 8.7-45.6 23-61.6-2.3-5.8-10-29.2 2.2-60.8a18.64 18.64 0 015-.5c8.1 0 26.4 3.1 56.6 24.1a208.21 208.21 0 01112.2 0c30.2-21 48.5-24.1 56.6-24.1a18.64 18.64 0 015 .5c12.2 31.6 4.5 55 2.2 60.8 14.3 16.1 23 36.6 23 61.6 0 88.2-52.4 107.6-102.3 113.3 8 7.1 15.2 21.1 15.2 42.5 0 30.7-.3 55.5-.3 63 0 5.4 3.1 11.5 11.4 11.5a19.35 19.35 0 004-.4C415.9 449.2 480 363.1 480 261.7 480 134.9 379.7 32 256 32z"
    />
  </svg>
</template>

================
File: src/icons/LinkedInIcon.vue
================
<template>
  <svg
    width="20px"
    height="20px"
    xmlns="http://www.w3.org/2000/svg"
    class="ionicon fill-foreground"
    viewBox="0 0 512 512"
  >
    <path
      d="M444.17 32H70.28C49.85 32 32 46.7 32 66.89v374.72C32 461.91 49.85 480 70.28 480h373.78c20.54 0 35.94-18.21 35.94-38.39V66.89C480.12 46.7 464.6 32 444.17 32zm-273.3 373.43h-64.18V205.88h64.18zM141 175.54h-.46c-20.54 0-33.84-15.29-33.84-34.43 0-19.49 13.65-34.42 34.65-34.42s33.85 14.82 34.31 34.42c-.01 19.14-13.31 34.43-34.66 34.43zm264.43 229.89h-64.18V296.32c0-26.14-9.34-44-32.56-44-17.74 0-28.24 12-32.91 23.69-1.75 4.2-2.22 9.92-2.22 15.76v113.66h-64.18V205.88h64.18v27.77c9.34-13.3 23.93-32.44 57.88-32.44 42.13 0 74 27.77 74 87.64z"
    />
  </svg>
</template>

================
File: src/icons/XIcon.vue
================
<template>
  <svg
    width="18px"
    height="18px"
    role="img"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    class="fill-foreground"
  >
    <title>X</title>
    <path
      d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
    />
  </svg>
</template>

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/pages/BlogPage.vue
================
<script setup lang="ts">
import { ref, computed } from 'vue'
import { useBlogPosts } from '../composables/useBlogPosts'

const { posts } = useBlogPosts()
const searchQuery = ref('')
const selectedCategories = ref<string[]>([])

// Récupération des catégories uniques
const allCategories = computed(() => {
  const categories = new Set<string>()
  posts.value.forEach(post => {
    post.categories?.forEach(category => categories.add(category))
  })
  return Array.from(categories)
})

const filteredPosts = computed(() => {
  const query = searchQuery.value.toLowerCase()
  return posts.value.filter(post => {
    // Filtre de recherche textuelle
    const matchesSearch =
      post.title.toLowerCase().includes(query) ||
      post.excerpt.toLowerCase().includes(query) ||
      post.categories?.some(cat => cat.toLowerCase().includes(query)) ||
      post.author?.name.toLowerCase().includes(query)

    // Filtre par catégorie
    const matchesCategories =
      selectedCategories.value.length === 0 ||
      post.categories?.some(cat => selectedCategories.value.includes(cat))

    return matchesSearch && matchesCategories
  })
})

const toggleCategory = (category: string) => {
  const index = selectedCategories.value.indexOf(category)
  if (index === -1) {
    selectedCategories.value.push(category)
  } else {
    selectedCategories.value.splice(index, 1)
  }
}

const clearFilters = () => {
  selectedCategories.value = []
  searchQuery.value = ''
}

const isCategorySelected = (category: string) => selectedCategories.value.includes(category)
</script>

<template>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <!-- En-tête -->
    <div class="mb-12">
      <h1 class="text-4xl font-bold mb-6 text-gray-900 dark:text-gray-100">Blog</h1>

      <!-- Barre de recherche -->
      <div class="relative max-w-xl mb-8">
        <input v-model="searchQuery" type="search" placeholder="Rechercher un article..." class="w-full px-4 py-3 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700
                 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent
                 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400" />
        <span class="absolute right-3 top-3 text-gray-400">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </span>
      </div>

      <!-- Filtres par catégorie -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold mb-3 text-gray-900 dark:text-gray-100">Filtrer par catégorie</h2>
        <div class="flex flex-wrap gap-2">
          <button v-for="category in allCategories" :key="category" @click="toggleCategory(category)" :class="[
            'px-3 py-1.5 text-sm font-medium rounded-full transition-colors',
            isCategorySelected(category)
              ? 'bg-blue-500 text-white hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700'
          ]">
            {{ category }}
          </button>
        </div>
        <div class="flex justify-center" v-if="selectedCategories.length > 0 || searchQuery">
          <button @click="clearFilters"
            class="mt-4 text-blue-500 dark:text-blue-400 hover:text-blue-600 dark:hover:text-blue-300">
            Effacer les filtres
          </button>
        </div>
      </div>

      <!-- Nombre de résultats -->
      <p class="mb-8 text-gray-600 dark:text-gray-400">
        {{ filteredPosts.length }} article{{ filteredPosts.length !== 1 && filteredPosts.length !== 0 ? 's' : '' }}
        trouvé{{ filteredPosts.length !== 1 && filteredPosts.length !== 0 ? 's' : '' }}
      </p>
    </div>

    <!-- Grille des articles -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      <router-link v-for="post in filteredPosts" :key="post.slug" :to="`/blog/${post.slug}`" class="group">
        <article class="h-full flex flex-col bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden
                      hover:shadow-xl dark:hover:shadow-2xl dark:shadow-gray-900/30 transition-all duration-300
                      border border-gray-100 dark:border-gray-700">
          <div class="relative">
            <img :src="post.coverImage" :alt="post.title"
              class="w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105" />
            <!-- Categories -->
            <div class="absolute bottom-2 left-2 flex flex-wrap gap-2">
              <span v-for="category in post.categories" :key="category"
                class="px-2 py-1 text-xs font-medium bg-gray-900/70 dark:bg-gray-800/70 text-white rounded-full">
                {{ category }}
              </span>
            </div>
          </div>

          <div class="p-6 flex-1 flex flex-col">
            <h2 class="text-xl font-semibold mb-3 text-gray-900 dark:text-gray-100 group-hover:text-blue-600
                       dark:group-hover:text-blue-400 transition-colors">
              {{ post.title }}
            </h2>
            <p class="text-gray-600 dark:text-gray-300 mb-4 flex-1">
              {{ post.excerpt }}
            </p>

            <div class="mt-auto">
              <!-- Author -->
              <div v-if="post.author" class="flex items-center mb-3">
                <img :src="post.author.img" :alt="post.author.name"
                  class="w-8 h-8 rounded-full mr-2 border-2 border-white dark:border-gray-700" />
                <span class="text-sm text-gray-700 dark:text-gray-300">{{ post.author.name }}</span>
              </div>

              <!-- Meta Info -->
              <div class="flex justify-between text-sm text-gray-500 dark:text-gray-400">
                <time>{{ new Date(post.date).toLocaleDateString() }}</time>
                <span>{{ post.readTime }}</span>
              </div>
            </div>
          </div>
        </article>
      </router-link>
    </div>

    <!-- Message aucun résultat -->
    <div v-if="filteredPosts.length === 0" class="text-center py-12">
      <p class="text-gray-600 dark:text-gray-400 text-lg">
        Aucun article ne correspond à votre recherche.
      </p>
    </div>
  </div>
</template>

<style scoped>
.router-link-active article {
  @apply ring-2 ring-blue-500 dark:ring-blue-400;
}
</style>

================
File: src/pages/BlogPost.vue
================
<script setup lang="ts">
import { ref, onMounted } from 'vue'

const post = ref({
  title: '',
  content: '',
  date: '',
  author: '',
  readTime: '',
  coverImage: ''
})

onMounted(() => {
  // In a real app, you would fetch the post data based on route.params.slug
  // This is just example data
  post.value = {
    title: 'Getting Started with Our Platform',
    content: `
      <p>This is where your blog post content would go. In a real application,
      you would likely fetch this content from a CMS or API.</p>

      <p>You might want to support rich text formatting, images, code blocks,
      and other markdown or HTML content.</p>
    `,
    date: '2024-03-21',
    author: 'John Doe',
    readTime: '5 min read',
    coverImage: '/blog-1.jpg'
  }
})
</script>

<template>
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">{{ post.title }}</h1>
      <div class="flex gap-4 text-gray-600">
        <time>{{ new Date(post.date).toLocaleDateString() }}</time>
        <span>{{ post.readTime }}</span>
        <span>By {{ post.author }}</span>
      </div>
    </header>

    <img :src="post.coverImage" :alt="post.title" class="w-full h-64 object-cover rounded-lg mb-8" />

    <div class="prose prose-lg max-w-none" v-html="post.content" />
  </article>
</template>

================
File: src/pages/BlogPostPage.vue
================
<!-- src/pages/BlogPostPage.vue -->
<script setup lang="ts">
import { computed, defineAsyncComponent } from 'vue'
import { useRoute } from 'vue-router'
import { useBlogPosts } from '../composables/useBlogPosts'

// Import components dynamically
const ArticleTitle = defineAsyncComponent(() => import('../components/ArticleTitle.vue'))
const ArticleResume = defineAsyncComponent(() => import('../components/ArticleResume.vue'))
const ArticleCta = defineAsyncComponent(() => import('../components/ArticleCta.vue'))

const route = useRoute()
const { posts } = useBlogPosts()

const post = computed(() =>
  posts.value.find(p => p.slug === route.params.slug)
)
</script>

<template>
  <div v-if="post" class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <header class="mb-12">
      <img v-if="post.coverImage" :src="post.coverImage" :alt="post.title"
        class="w-full h-[400px] object-cover rounded-xl shadow-lg mb-10" />

      <h1 class="text-4xl md:text-5xl font-bold mb-6 text-gray-900 dark:text-gray-100">
        {{ post.title }}
      </h1>

      <div class="flex items-center justify-between mb-8 border-b border-gray-100 dark:border-gray-800 pb-6">
        <div v-if="post.author" class="flex items-center">
          <img :src="post.author.img" :alt="post.author.name"
            class="w-12 h-12 rounded-full mr-4 border-2 border-white dark:border-gray-800 shadow-sm" />
          <div>
            <div class="font-semibold text-gray-900 dark:text-gray-100">{{ post.author.name }}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">
              {{ new Date(post.date).toLocaleDateString() }} · {{ post.readTime }}
            </div>
          </div>
        </div>
      </div>

      <div v-if="post.categories" class="flex flex-wrap gap-2 mb-8">
        <span v-for="category in post.categories" :key="category" class="px-4 py-1.5 bg-gray-50 dark:bg-gray-800 text-gray-700 dark:text-gray-300
                 rounded-full text-sm font-medium hover:bg-gray-100 dark:hover:bg-gray-700
                 transition-colors">
          {{ category }}
        </span>
      </div>
    </header>

    <article class="prose prose-lg max-w-none">
      <div v-html="post.content" />
    </article>
  </div>
  <div v-else class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <p class="text-center text-gray-600">Post not found</p>
  </div>
</template>

================
File: src/pages/Home.vue
================
<script setup lang="ts">
import Hero from "../components/Hero.vue";
import Benefits from "../components/Benefits.vue";
import Features from "../components/Features.vue";
import HowItWorks from "../components/HowItWorks.vue";
import Sponsors from "../components/Sponsors.vue";
// import Testimonials from "../components/Testimonials.vue";
// import Contact from "../components/Contact.vue";
import FAQ from "../components/FAQ.vue";
</script>

<template>
  <Hero />
  <Sponsors />
  <Benefits />
  <Features />
  <HowItWorks />
  <!-- <Testimonials /> -->
  <!-- <Contact /> -->
  <FAQ />
</template>

================
File: src/router/index.ts
================
import { createRouter, createWebHistory } from 'vue-router'
import BlogPage from '../pages/BlogPage.vue'
import BlogPostPage from '../pages/BlogPostPage.vue'
import Home from '@/pages/Home.vue'

const router = createRouter({
  history: createWebHistory(),
  routes: [
    {
      path: '/',
      name: 'home',
      component: Home
    },
    {
      path: '/blog',
      name: 'blog',
      component: BlogPage
    },
    {
      path: '/blog/:slug',
      name: 'blog-post',
      component: BlogPostPage
    }
  ]
})

export default router

================
File: src/App.vue
================
<script setup lang="ts">
import Navbar from "./components/Navbar.vue";
import Footer from "./components/Footer.vue";
import Toaster from "./components/ui/toast/Toaster.vue";

</script>

<template>
  <Toaster />
  <Navbar />
  <router-view></router-view>
  <Footer />
</template>

================
File: src/main.ts
================
import { createApp } from "vue";
import App from "./App.vue";
import router from "./router";
import "./assets/index.css";

const app = createApp(App);
app.use(router);
app.mount("#app");

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://shadcn-vue.com/schema.json",
  "style": "default",
  "typescript": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/assets/index.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "framework": "vite",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: index.html
================
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="./src/assets/icon.ico"
    />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Abonne-moi - Transformez vos clients en abonnés fidèles</title>

    <!-- Primary Meta Tags -->
    <meta
      name="title"
      content="Abonne-moi - Solution d'abonnement pour commerces"
    />
    <meta
      name="description"
      content="Créez des formules d'abonnement en magasin et mensualisez vos revenus avec Abonne-moi"
    />

    <!-- Open Graph / Facebook -->
    <meta
      property="og:type"
      content="website"
    />
    <meta
      property="og:url"
      content="https://abonne-moi.fr"
    />
    <meta
      property="og:title"
      content="Abonne-moi - Solution d'abonnement pour commerces"
    />
    <meta
      property="og:description"
      content="Créez des formules d'abonnement en magasin et mensualisez vos revenus avec Abonne-moi"
    />
    <meta
      property="og:image"
      content="[Your OG Image URL]"
    />

    <!-- Twitter -->
    <meta
      name="twitter:card"
      content="summary_large_image"
    />
    <meta
      name="twitter:url"
      content="https://abonne-moi.fr"
    />
    <meta
      name="twitter:title"
      content="Abonne-moi - Solution d'abonnement pour commerces"
    />
    <meta
      name="twitter:description"
      content="Créez des formules d'abonnement en magasin et mensualisez vos revenus avec Abonne-moi"
    />
    <meta
      name="twitter:image"
      content="[Your Twitter Card Image URL]"
    />
  </head>
  <body>
    <div id="app"></div>
    <script
      type="module"
      src="/src/main.ts"
    ></script>
  </body>
</html>

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Leopoldo Miranda

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "shadcn-vue-landing-page",
  "description": "Shadcn/Vue landing page template using Vue, Shadcn/Vue + TypeScript + Tailwind CSS.",
  "version": "0.1.1",
  "author": {
    "name": "Leopoldo Miranda",
    "email": "leomirandadev@gmail.com",
    "url": "https://github.com/leomirandaa"
  },
  "keywords": [
    "vue",
    "typescript",
    "shadcn",
    "shadcn/vue",
    "tailwind",
    "landing-page",
    "template",
    "responsive-design"
  ],
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@selemondev/vue3-marquee": "^0.0.8",
    "@vee-validate/zod": "^4.13.2",
    "@vueuse/core": "^11.3.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "embla-carousel": "^8.3.0",
    "embla-carousel-vue": "^8.3.0",
    "front-matter": "^4.0.2",
    "frontmatter-markdown-loader": "^3.7.0",
    "lucide-vue-next": "^0.452.0",
    "marked": "^15.0.4",
    "radix-vue": "^1.9.7",
    "tailwind-merge": "^2.5.3",
    "tailwindcss-animate": "^1.0.7",
    "vee-validate": "^4.13.2",
    "vue": "^3.5.12",
    "vue-router": "^4.5.0",
    "zod": "^3.23.8"
  },
  "optionalDependencies": {
    "@rollup/rollup-darwin-arm64": "4.6.1",
    "@rollup/rollup-linux-x64-gnu": "4.6.1"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^20.14.5",
    "@vitejs/plugin-vue": "^5.0.5",
    "autoprefixer": "^10.4.19",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.4.5",
    "vite": "^5.3.1",
    "vue-tsc": "^2.0.21"
  },
  "npm": {
    "force": true
  }
}

================
File: README.md
================
# Shadcn/Vue Landing Page Template

## <a href="https://www.shadcn-vue.com/" target="_blank">Shadcn-Vue</a> + <a href="https://vuejs.org/" target="_blank">Vue.js</a> + <a href="https://www.typescriptlang.org/" target="_blank">TypeScript</a> + <a href="https://tailwindcss.com/" target="_blank">Tailwind</a>.

![Alt text](./public/demo-img.jpg)
Live demo is now available: <a href="https://shadcn-vue-landing-page.vercel.app" target="_blank">Live Demo</a>

## Sections

- [x] Navbar
- [x] Sidebar(mobile)
- [x] Hero
- [x] Sponsors
- [x] Benefits
- [x] Features
- [x] Services
- [x] HowItWorks
- [x] Testimonials
- [x] Pricing
- [x] Frequently Asked Questions(FAQ)
- [x] Team
- [x] Community
- [x] Contact
- [x] Footer

## Features

- [x] Fully Responsive Design
- [x] User Friendly Navigation
- [x] Dark Mode
- [x] Meta tags

## How to install

1. Clone this repositoy:

```bash
git clone https://github.com/leoMirandaa/shadcn-vue-landing-page.git
```

2. Go into project

```bash
cd shadcn-vue-landing-page
```

3. Install dependencies

```bash
npm install
```

4. Run project

```bash
npm run dev
```

================
File: tailwind.config.js
================
const animate = require("tailwindcss-animate");

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  safelist: ["dark"],
  prefix: "",

  content: [
    "./pages/**/*.{ts,tsx,vue}",
    "./components/**/*.{ts,tsx,vue}",
    "./app/**/*.{ts,tsx,vue}",
    "./src/**/*.{ts,tsx,vue}",
  ],

  theme: {
    container: {
      center: true,
      padding: "1.5rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        xl: "calc(var(--radius) + 4px)",
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        "collapsible-down": {
          from: { height: 0 },
          to: { height: "var(--radix-collapsible-content-height)" },
        },
        "collapsible-up": {
          from: { height: "var(--radix-collapsible-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "collapsible-down": "collapsible-down 0.2s ease-in-out",
        "collapsible-up": "collapsible-up 0.2s ease-in-out",
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
    animate,
  ],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import path from "path";
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";

import tailwind from "tailwindcss";
import autoprefixer from "autoprefixer";

export default defineConfig({
  css: {
    postcss: {
      plugins: [tailwind(), autoprefixer()],
    },
  },
  plugins: [vue()],
  assetsInclude: ['**/*.md'],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});
